[{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cdm_reference.html","id":"standard-omop-cdm-tables","dir":"Articles","previous_headings":"","what":"1) Standard OMOP CDM tables","title":"The cdm reference","text":"multiple versions OMOP CDM. list tables included version 5.3 follows. standard OMOP tables required fields. can check required column person table, example, like ","code":"library(omopgenerics) #>  #> Attaching package: 'omopgenerics' #> The following object is masked from 'package:stats': #>  #>     filter omopTables() #>  [1] \"person\"                \"observation_period\"    \"visit_occurrence\"      #>  [4] \"visit_detail\"          \"condition_occurrence\"  \"drug_exposure\"         #>  [7] \"procedure_occurrence\"  \"device_exposure\"       \"measurement\"           #> [10] \"observation\"           \"death\"                 \"note\"                  #> [13] \"note_nlp\"              \"specimen\"              \"fact_relationship\"     #> [16] \"location\"              \"care_site\"             \"provider\"              #> [19] \"payer_plan_period\"     \"cost\"                  \"drug_era\"              #> [22] \"dose_era\"              \"condition_era\"         \"metadata\"              #> [25] \"cdm_source\"            \"concept\"               \"vocabulary\"            #> [28] \"domain\"                \"concept_class\"         \"concept_relationship\"  #> [31] \"relationship\"          \"concept_synonym\"       \"concept_ancestor\"      #> [34] \"source_to_concept_map\" \"drug_strength\"         \"cohort_definition\"     #> [37] \"attribute_definition\"  \"concept_recommended\" omopColumns(table = \"person\", version = \"5.3\") #>  [1] \"person_id\"                   \"gender_concept_id\"           #>  [3] \"year_of_birth\"               \"month_of_birth\"              #>  [5] \"day_of_birth\"                \"birth_datetime\"              #>  [7] \"race_concept_id\"             \"ethnicity_concept_id\"        #>  [9] \"location_id\"                 \"provider_id\"                 #> [11] \"care_site_id\"                \"person_source_value\"         #> [13] \"gender_source_value\"         \"gender_source_concept_id\"    #> [15] \"race_source_value\"           \"race_source_concept_id\"      #> [17] \"ethnicity_source_value\"      \"ethnicity_source_concept_id\" omopColumns(table = \"observation_period\", version = \"5.3\") #> [1] \"observation_period_id\"         \"person_id\"                     #> [3] \"observation_period_start_date\" \"observation_period_end_date\"   #> [5] \"period_type_concept_id\""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cdm_reference.html","id":"cohort-tables","dir":"Articles","previous_headings":"","what":"2) Cohort tables","title":"The cdm reference","text":"Studies using OMOP CDM often create study-specific cohort tables. also consider part cdm reference created. cohort table associated specific class , generatedCohortSet, described subsequent vignette. standard OMOP CDM tables, cohort tables expected contain specific set fields (restriction placed whether include additional fields ).","code":"cohortColumns(table = \"cohort\", version = \"5.3\") #> [1] \"cohort_definition_id\" \"subject_id\"           \"cohort_start_date\"    #> [4] \"cohort_end_date\" cohortColumns(table = \"cohort_set\", version = \"5.3\") #> [1] \"cohort_definition_id\" \"cohort_name\" cohortColumns(table = \"cohort_attrition\", version = \"5.3\") #> [1] \"cohort_definition_id\" \"number_records\"       \"number_subjects\"      #> [4] \"reason_id\"            \"reason\"               \"excluded_records\"     #> [7] \"excluded_subjects\""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cdm_reference.html","id":"achilles-result-tables","dir":"Articles","previous_headings":"","what":"3) Achilles result tables","title":"The cdm reference","text":"Achilles R package provides descriptive statistics OMOP CDM database. results Achilles stored tables database. following tables created given columns.","code":"achillesTables() #> [1] \"achilles_analysis\"     \"achilles_results\"      \"achilles_results_dist\" achillesColumns(\"achilles_analysis\") #> [1] \"analysis_id\"    \"analysis_name\"  \"stratum_1_name\" \"stratum_2_name\" #> [5] \"stratum_3_name\" \"stratum_4_name\" \"stratum_5_name\" \"is_default\"     #> [9] \"category\" achillesColumns(\"achilles_results\") #> [1] \"analysis_id\" \"stratum_1\"   \"stratum_2\"   \"stratum_3\"   \"stratum_4\"   #> [6] \"stratum_5\"   \"count_value\" achillesColumns(\"achilles_results_dist\") #>  [1] \"analysis_id\"  \"stratum_1\"    \"stratum_2\"    \"stratum_3\"    \"stratum_4\"    #>  [6] \"stratum_5\"    \"count_value\"  \"min_value\"    \"max_value\"    \"avg_value\"    #> [11] \"stdev_value\"  \"median_value\" \"p10_value\"    \"p25_value\"    \"p75_value\"    #> [16] \"p90_value\""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cdm_reference.html","id":"other-tables","dir":"Articles","previous_headings":"","what":"4) Other tables","title":"The cdm reference","text":"Beyond standard OMOP CDM tables cohort tables, additional tables can added cdm reference. tables , example, OMOP extension/ expansion tables extra tables containing data required perform study normally included part OMOP CDM. tables contain set fields.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cdm_reference.html","id":"general-rules-for-a-cdm-reference","dir":"Articles","previous_headings":"","what":"General rules for a cdm reference","title":"The cdm reference","text":"table part cdm object fulfill following conditions: tables must share common source (, mix tables database -memory permitted). name tables must lower snake_case. name column names table must lower snake_case. person observation_period tables must present. cdm reference must attribute “cdmName” gives name associated data contained within.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cdm_reference.html","id":"export-metadata-about-the-cdm-reference","dir":"Articles","previous_headings":"","what":"Export metadata about the cdm reference","title":"The cdm reference","text":"export method applied cdm reference, metadata cdm written csv. csv contains following columns","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/codelists.html","id":"codelist","dir":"Articles","previous_headings":"","what":"Codelist","title":"Concept sets","text":"concept set can represented either codelist concept set expression. codelist named list, item list containing specific concept IDs. codelist must named codelist missing values","code":"condition_codes <- list(   \"diabetes\" = c(201820, 4087682, 3655269),   \"asthma\" = 317009 ) condition_codes <- newCodelist(condition_codes) #> Warning: ! `codelist` casted to integers.  condition_codes #>  #> - asthma (1 codes) #> - diabetes (3 codes) condition_codes <- list(c(201820, 4087682, 3655269)) newCodelist(condition_codes) #> Error in `newCodelist()`: #> ✖ `codelist` must be named. #> ! `codelist` must be a list with objects of class numeric, integer, and #>   integer64; it can not contain NA; it has to be named; it can not be NULL. condition_codes <- list(   \"diabetes\" = c(201820, NA, 3655269),   \"asthma\" = 317009 ) newCodelist(condition_codes) #> Warning: ! `codelist` casted to integers. #> Error in `validateCodelist()`: #> ✖ 1 codelist contain NA: `diabetes`."},{"path":"https://darwin-eu.github.io/omopgenerics/articles/codelists.html","id":"concept-set-expression","dir":"Articles","previous_headings":"","what":"Concept set expression","title":"Concept sets","text":"concept set expression provides high-level definition concepts , applied specific OMOP CDM vocabulary version (making use concept hierarchies relationships), result codelist. codelist, concept set expression must named list missing elements.","code":"condition_cs <- list(   \"diabetes\" = dplyr::tibble(     \"concept_id\" = c(201820, 4087682),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   ),   \"asthma\" = dplyr::tibble(     \"concept_id\" = 317009,     \"excluded\" = FALSE,     \"descendants\" = FALSE,     \"mapped\" = FALSE   ) ) condition_cs <- newConceptSetExpression(condition_cs)  condition_cs #>  #> - asthma (1 concept criteria) #> - diabetes (2 concept criteria) condition_cs <- list(   dplyr::tibble(     \"concept_id\" = c(201820, NA),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   ) ) newConceptSetExpression(condition_cs) #> Error in `newConceptSetExpression()`: #> ✖ `x` must be named. #> ! `x` must be a list with objects of class tbl; it can not contain NA; it has #>   to be named; it can not be NULL. condition_cs <- list(   \"diabetes\" = dplyr::tibble(     \"concept_id\" = c(201820, NA),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   ),   \"asthma\" = dplyr::tibble(     \"concept_id\" = 317009,     \"excluded\" = FALSE,     \"descendants\" = FALSE,     \"mapped\" = FALSE   ) ) newConceptSetExpression(condition_cs) #> Error in `newConceptSetExpression()`: #> ✖ `x[[i]]$concept_id` contains NA in position 2. #> ! `x[[i]]$concept_id` must be an integerish numeric; it can not contain NA; it #>   can not be NULL."},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cohorts.html","id":"cohort-table","dir":"Articles","previous_headings":"","what":"Cohort table","title":"Cohort tables","text":"cohort set people fulfill certain set criteria period time. omopgenerics defined cohort_table class allows us represent individuals cohort. cohort_table created using newCohortTable() function defined : cohort table. cohort set. cohort attrition. Let’s start creating cdm reference just two people. Now let’s say one people clinical event interest, can include cohort table can used part analysis. cohort table associated settings attrition. didn’t specify newCohortTable() automatically populated. can access cohort set cohort table using function settings() Meanwhile, can access cohort attrition cohort table using function attrition() Cohort attrition table also used compute number counts cohort (ie last row attrition). can seen function cohortCount(). Note cohort count taken last row attrition, make changes cohort update attrition go. can additional, optional, attribute keeps track concepts used create cohort. example codelist associated cohort. though associate cohort codelist one elements define cohort table fulfill certain criteria.","code":"person <- tibble(   person_id = c(1, 2),   gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = c(1, 2), person_id = c(1, 2),   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2021-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(     \"person\" = person,     \"observation_period\" = observation_period   ),   cdmName = \"example_cdm\" ) cdm #>  #> ── # OMOP CDM reference (local) of example_cdm ───────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - cohort <- tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <- insertTable(cdm = cdm, name = \"cohort\", table = cohort) cdm$cohort <- newCohortTable(cdm$cohort) settings(cdm$cohort) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1 attrition(cdm$cohort) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$cohort) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1 cdm$cohort <- cdm$cohort |>   filter(cohort_start_date == as.Date(\"2019-01-01\")) |>   compute(name = \"cohort\", temporary = FALSE) |>   recordCohortAttrition(\"Require cohort start January 1st 2019\") attrition(cdm$cohort) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> 2                    1              0               0         2 Require cohort … #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$cohort) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              0               0 cohortCodelist(cdm$cohort, cohortId = 1, type = \"index event\") #> Warning: The `type` argument of `cohortCodelist()` is deprecated as of omopgenerics #> 1.2.0. #> ℹ Please use the `codelistType` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: No codelists found for the specified cohorts #> list() cdm$cohort <- newCohortTable(cdm$cohort,   cohortCodelistRef = dplyr::tibble(     cohort_definition_id = c(1, 1),     codelist_name = c(\"disease X\", \"disease X\"),     concept_id = c(101, 102),     type = \"index event\"   ) ) cohortCodelist(cdm$cohort, cohortId = 1, type = \"index event\") #> Warning: ! `codelist` casted to integers. #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - disease X (2 codes)"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cohorts.html","id":"cohort-set","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Set","title":"Cohort tables","text":"cohort set must table : Lower case column names. least cohort_definition_id, cohort_name columns (cohortColumns(\"cohort_set\")). cohort_name must contain unique cohort names (currently cased snake case). cohort_definition_id must contain unique cohort ids, ids present table must present cohort set ids must present cohort attrition.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cohorts.html","id":"cohort-attrition","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Attrition","title":"Cohort tables","text":"cohort attrition must table : Lower case column names. least cohort_definition_id, number_records, number_subjects, reason_id, reason, excluded_records, excluded_subjects columns (cohortColumns(\"cohort_attrition\")). cohort_definition_id must contain cohort ids, ids present table must present cohort attrition ids must present cohort set. must exist unique pairs cohort_definition_id reason_id.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cohorts.html","id":"cohort-codelist","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Codelist","title":"Cohort tables","text":"cohort codelist must table : Lower case column names. least cohort_definition_id, codelist_name, concept_id, codelist_type columns (cohortColumns(\"cohort_codelist\")). cohort_definition_id must contain cohort ids, ids present table must present cohort attrition ids must present cohort set. type must one “index event”, “inclusion criteria”, “exit criteria”","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cohorts.html","id":"cohort-table-1","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Table","title":"Cohort tables","text":"cohort table must table : comes cdm_reference (extracted via cdm$cohort). source cdm_reference. Lower case column names. least cohort_definition_id, subject_id, cohort_start_date, cohort_end_date columns (cohortColumns(\"cohort\")). record NA value required columns. record cohort_start_date cohort_end_date. overlap records. person can cohort several times (several records subject_id). can’t enter (cohort_start_date) cohort leaving (cohort_end_date). individual can’t simultaneously cohort. rule applied cohort_definition_id level, records different cohort_definition_id can overlap. time cohort_start_date cohort_end_date (included) individual must observation.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cohorts.html","id":"combining-generated-cohort-sets","dir":"Articles","previous_headings":"","what":"Combining generated cohort sets","title":"Cohort tables","text":"can bind two cohort tables using method bind(). can combine several cohort tables using method. constrain cohort names must unique across different cohort tables. provide name new cohort table.","code":"asthma <- tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <- insertTable(cdm, name = \"asthma\", table = asthma) cdm$asthma <- newCohortTable(cdm$asthma,   cohortSetRef = tibble(     cohort_definition_id = 1,     cohort_name = \"asthma\"   ) )  copd <- tibble(   cohort_definition_id = 1, subject_id = 2,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <- insertTable(cdm, name = \"copd\", table = copd) cdm$copd <- newCohortTable(cdm$copd,   cohortSetRef = tibble(     cohort_definition_id = 1,     cohort_name = \"copd\"   ) )  cdm <- bind(cdm$asthma,   cdm$copd,   name = \"exposures\" ) cdm$exposures #> # A tibble: 2 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #> *                <int>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-10      #> 2                    2          2 2020-01-01        2020-01-10  settings(cdm$exposures) #> # A tibble: 2 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 asthma      #> 2                    2 copd attrition(cdm$exposures) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> 2                    2              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$exposures) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1 #> 2                    2              1               1"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/cohorts.html","id":"export-metadata-about-a-cohort-table","dir":"Articles","previous_headings":"","what":"Export metadata about a cohort table","title":"Cohort tables","text":"can export metadata cohort_table using function: summary(): provide summarised_result object metadata cohort (cohort set, cohort counts cohort attrition).","code":"summary(cdm$exposures) |>   glimpse() #> `cohort_definition_id` casted to character. #> `cohort_definition_id` casted to character. #> Rows: 12 #> Columns: 13 #> $ result_id        <int> 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4 #> $ cdm_name         <chr> \"example_cdm\", \"example_cdm\", \"example_cdm\", \"example… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"asthma\", \"asthma\", \"copd\", \"copd\", \"asthma\", \"asthma… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"reason\",… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"Initial … #> $ variable_name    <chr> \"number_records\", \"number_subjects\", \"number_records\"… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"0\", \"0\", \"1\", \"1\", \"0\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"reason_i… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"1\", \"1\",…"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/logging.html","id":"logging","dir":"Articles","previous_headings":"","what":"Logging","title":"Logging with omopgenerics","text":"Logging common practice studies, specially sharing code. Logging can useful check timings record error messages. exist multiple packages R allow record log messages. example logger package quite useful.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/logging.html","id":"logging-with-omopgenerics","dir":"Articles","previous_headings":"Logging","what":"Logging with omopgenerics","title":"Logging with omopgenerics","text":"omopgenerics want replace packages, just provide simple functionality log messages. future might consider building top one existing log packages, moment three simple functions: createLogFile() used create log file. logMessage() used record messages want log file, note messages also displayed console. logFile exist message displayed console. summariseLogFile() used read log file format summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/logging.html","id":"example","dir":"Articles","previous_headings":"Logging","what":"Example","title":"Logging with omopgenerics","text":"Let’s see simple example logging omopgenerics: Note logFile created logMessage() function displays message console.","code":"library(omopgenerics, warn.conflicts = FALSE)  # create the log file createLogFile(logFile = tempfile(pattern = \"log_{date}_{time}\")) #> ℹ Creating log file: /tmp/Rtmptw7KFi/log_2025_05_21_17_39_2227314163c57a.txt. #> [2025-05-21 17:39:22] - Log file created  # study logMessage(\"Generating random numbers\") #> [2025-05-21 17:39:22] - Generating random numbers x <- runif(1e6)  logMessage(\"Calculating the sum\") #> [2025-05-21 17:39:22] - Calculating the sum result <- sum(x)  # export logger to a `summarised_result` log <- summariseLogFile() #> [2025-05-21 17:39:22] - Exporting log file  # content of the log file readLines(getOption(\"omopgenerics.logFile\")) |>   cat(sep = \"\\n\") #> [2025-05-21 17:39:22] - Log file created #> [2025-05-21 17:39:22] - Generating random numbers #> [2025-05-21 17:39:22] - Calculating the sum #> [2025-05-21 17:39:22] - Exporting log file  # `summarised_result` object log #> # A tibble: 4 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         1 unknown  overall    overall     log_id      1            #> 2         1 unknown  overall    overall     log_id      2            #> 3         1 unknown  overall    overall     log_id      3            #> 4         1 unknown  overall    overall     log_id      4            #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  # `summarised_result` object settings settings(log) #> # A tibble: 1 × 8 #>   result_id result_type     package_name package_version group strata additional #>       <int> <chr>           <chr>        <chr>           <chr> <chr>  <chr>      #> 1         1 summarise_log_… omopgenerics 1.2.0           \"\"    log_id \"\"         #> # ℹ 1 more variable: min_cell_count <chr>  # tidy version of the `summarised_result` tidy(log) #> # A tibble: 4 × 5 #>   cdm_name log_id variable_name             variable_level date_time           #>   <chr>    <chr>  <chr>                     <chr>          <chr>               #> 1 unknown  1      Log file created          NA             2025-05-21 17:39:22 #> 2 unknown  2      Generating random numbers NA             2025-05-21 17:39:22 #> 3 unknown  3      Calculating the sum       NA             2025-05-21 17:39:22 #> 4 unknown  4      Exporting log file        NA             2025-05-21 17:39:22"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/logging.html","id":"exportsummarisedresult","dir":"Articles","previous_headings":"Logging","what":"exportSummarisedResult","title":"Logging with omopgenerics","text":"exportSummarisedResult() exports default logger one. See example code: exportSummarisedResult() also exported log file, let’s see . Let’s start importing exported summarised_result object: can see log file exported see result_type = \"summarise_log_file\": easiest way explore log using tidy() version:","code":"library(dplyr, warn.conflicts = FALSE) library(tidyr, warn.conflicts = FALSE)  # create the log file createLogFile(logFile = tempfile(pattern = \"log_{date}_{time}\")) #> ℹ Creating log file: /tmp/Rtmptw7KFi/log_2025_05_21_17_39_2227317f1428d6.txt. #> [2025-05-21 17:39:22] - Log file created  # start analysis logMessage(\"Deffining toy data\") #> [2025-05-21 17:39:22] - Deffining toy data n <- 1e5 x <- tibble(person_id = seq_len(n), age = rnorm(n = n, mean = 55, sd = 20))  logMessage(\"Summarise toy data\") #> [2025-05-21 17:39:23] - Summarise toy data res <- x |>   summarise(     `number subjects_count` = n(),     `age_mean` = mean(age),     `age_sd` = sd(age),     `age_median` = median(age),     `age_q25` = quantile(age, 0.25),     `age_q75` = quantile(age, 0.75)   ) |>   pivot_longer(     cols = everything(),      names_to = c(\"variable_name\", \"estimate_name\"),      names_sep = \"_\",     values_to = \"estimate_value\"   ) |>   mutate(     result_id = 1L,     cdm_name = \"mock data\",     variable_level = NA_character_,     estimate_type = if_else(estimate_name == \"count\", \"integer\", \"numeric\"),     estimate_value = as.character(estimate_value)   ) |>   uniteGroup() |>   uniteStrata() |>   uniteAdditional() |>   newSummarisedResult() #> `result_type`, `package_name`, and `package_version` added to #> settings.  # res is a summarised_result object that we can export using the `exportSummarisedResult` tempDir <- tempdir() exportSummarisedResult(res, path = tempDir) #> [2025-05-21 17:39:23] - Exporting log file result <- importSummarisedResult(tempDir) #> Reading file: /tmp/Rtmptw7KFi/results_mock data_2025_05_21.csv. #> Converting to summarised_result: #> /tmp/Rtmptw7KFi/results_mock data_2025_05_21.csv. result |>   settings() |>    glimpse() #> Rows: 2 #> Columns: 8 #> $ result_id       <int> 1, 2 #> $ result_type     <chr> \"\", \"summarise_log_file\" #> $ package_name    <chr> \"\", \"omopgenerics\" #> $ package_version <chr> \"\", \"1.2.0\" #> $ group           <chr> \"\", \"\" #> $ strata          <chr> \"\", \"log_id\" #> $ additional      <chr> \"\", \"\" #> $ min_cell_count  <chr> \"5\", \"5\" result |>   filterSettings(result_type == \"summarise_log_file\") |>   tidy() #> # A tibble: 4 × 5 #>   cdm_name  log_id variable_name      variable_level date_time           #>   <chr>     <chr>  <chr>              <chr>          <chr>               #> 1 mock data 1      Log file created   NA             2025-05-21 17:39:22 #> 2 mock data 2      Deffining toy data NA             2025-05-21 17:39:22 #> 3 mock data 3      Summarise toy data NA             2025-05-21 17:39:23 #> 4 mock data 4      Exporting log file NA             2025-05-21 17:39:23"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/reexport.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Re-exporting functions from omopgnerics","text":"omopgenerics package meant invisible user developer focused package. means typical user omopverse packages never need import directly . means functions needed used user need reexported packages.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/reexport.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Re-exporting functions from omopgnerics","text":"package defined implementation desired method (attrition, settings, …), function reexported .","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/reexport.html","id":"cdm-reference","dir":"Articles","previous_headings":"","what":"CDM reference","title":"Re-exporting functions from omopgnerics","text":"package function create cdm_reference object, package re-export several functions. access cdm_reference attributes: cdmSource() cdmVersion() cdmName() access cdm_table attributes: tableSource() tableName() cdmReference() insert drop tables using cdm object: insertTable() dropSourceTable() listSourceTable() readSourceTable() Helpers create appropriate cdm tables: omopColumns() omopTables() cohortColumns() cohortTables() achillesColumns() achillesTables()","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/reexport.html","id":"cohorts","dir":"Articles","previous_headings":"","what":"Cohorts","title":"Re-exporting functions from omopgnerics","text":"package function create cohort_table object, package re-export following functions: settings() attrition() cohortCount() cohortCodelist() bind()","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/reexport.html","id":"summarised-result","dir":"Articles","previous_headings":"","what":"Summarised result","title":"Re-exporting functions from omopgnerics","text":"package function create summarised_result object, package re-export following functions: suppress() bind() settings() exportSummarisedResult() importSummarisedResult() groupColumns() strataColumns() additionalColumns()","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A summarised result","text":"summarised result table contains aggregated summary statistics (result set patient-level data). summarised result object consist 2 objects: results table settings table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"results-table","dir":"Articles","previous_headings":"Introduction","what":"Results table","title":"A summarised result","text":"table consist 13 columns: result_id (1), used identify group results common settings (see settings ). cdm_name (2), used identify name cdm object used obtain results. group_name (3) - group_level (4), columns work together name-level pair. name-level pair two columns work together summarise information multiple columns. name column contains column names separated &&& level column contains column values separated &&&. Elements name column must snake_case. Usually group aggregation used show high level aggregations: e.g. cohort name codelist name. strata_name (5) - strata_level (6), columns work together name-level pair. Usually strata aggregation used show stratifications results: e.g. age groups sex. variable_name (7), name variable interest. variable_level (8), level variable interest, usually subclass variable_name. estimate_name (9), name estimate. estimate_type (10), type value displayed, supported types : numeric, integer, date, character, proportion, percentage, logical. estimate_value (11), value interest. additional_name (12) - additional_level (13), columns work together name-level pair. Usually additional aggregation used include aggregations fit group/strata definition. following table summarises requirements column summarised_result format:","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"settings","dir":"Articles","previous_headings":"Introduction","what":"Settings","title":"A summarised result","text":"settings table provides one row per result_id settings used generate results, limit columns parameters provided per result_id. least 3 values provided: resut_type (1): identifies type result provided. usually use name function generated set result snake_case. Example function generates summarised result named summariseMyCustomData used result_type : summarise_my_custom_data. package_name (2): name package generated result type. package_version (3): version package generated result type. columns required characters, restriction apply extra columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"newsummarisedresult","dir":"Articles","previous_headings":"Introduction","what":"newSummarisedResult","title":"A summarised result","text":"newSummarisedResult() function can used create  objects, inputs function : summarised_result table must fulfill conditions specified ; settings argument. settings argument can NULL contain required columns populated default (warning appear). Let’s see simple example: can also associate settings results. typically used explain result created.","code":"library(omopgenerics) library(dplyr)  x <- tibble(   result_id = 1L,   cdm_name = \"my_cdm\",   group_name = \"cohort_name\",   group_level = \"cohort1\",   strata_name = \"sex\",   strata_level = \"male\",   variable_name = \"Age group\",   variable_level = \"10 to 50\",   estimate_name = \"count\",   estimate_type = \"numeric\",   estimate_value = \"5\",   additional_name = \"overall\",   additional_level = \"overall\" )  result <- newSummarisedResult(x) result |>   glimpse() #> Rows: 1 #> Columns: 13 #> $ result_id        <int> 1 #> $ cdm_name         <chr> \"my_cdm\" #> $ group_name       <chr> \"cohort_name\" #> $ group_level      <chr> \"cohort1\" #> $ strata_name      <chr> \"sex\" #> $ strata_level     <chr> \"male\" #> $ variable_name    <chr> \"Age group\" #> $ variable_level   <chr> \"10 to 50\" #> $ estimate_name    <chr> \"count\" #> $ estimate_type    <chr> \"numeric\" #> $ estimate_value   <chr> \"5\" #> $ additional_name  <chr> \"overall\" #> $ additional_level <chr> \"overall\" settings(result) #> # A tibble: 1 × 8 #>   result_id result_type package_name package_version group     strata additional #>       <int> <chr>       <chr>        <chr>           <chr>     <chr>  <chr>      #> 1         1 \"\"          \"\"           \"\"              cohort_n… sex    \"\"         #> # ℹ 1 more variable: min_cell_count <chr> result <- newSummarisedResult(   x = x,   settings = tibble(     result_id = 1L,     package_name = \"PatientProfiles\",     study = \"my_characterisation_study\"   ) )  result |> glimpse() #> Rows: 1 #> Columns: 13 #> $ result_id        <int> 1 #> $ cdm_name         <chr> \"my_cdm\" #> $ group_name       <chr> \"cohort_name\" #> $ group_level      <chr> \"cohort1\" #> $ strata_name      <chr> \"sex\" #> $ strata_level     <chr> \"male\" #> $ variable_name    <chr> \"Age group\" #> $ variable_level   <chr> \"10 to 50\" #> $ estimate_name    <chr> \"count\" #> $ estimate_type    <chr> \"numeric\" #> $ estimate_value   <chr> \"5\" #> $ additional_name  <chr> \"overall\" #> $ additional_level <chr> \"overall\" settings(result) #> # A tibble: 1 × 9 #>   result_id result_type package_name    package_version group  strata additional #>       <int> <chr>       <chr>           <chr>           <chr>  <chr>  <chr>      #> 1         1 \"\"          PatientProfiles \"\"              cohor… sex    \"\"         #> # ℹ 2 more variables: min_cell_count <chr>, study <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"combining-summarised-results","dir":"Articles","previous_headings":"","what":"Combining summarised results","title":"A summarised result","text":"Multiple summarised results objects can combined using bind function. Result id assigned set results settings. two groups results settings althought different objects merged single one. Now results can combine using bind. two sets results contain result ID, results combined automatically updated.","code":"result1 <- newSummarisedResult(   x = tibble(     result_id = 1L,     cdm_name = \"my_cdm\",     group_name = \"cohort_name\",     group_level = \"cohort1\",     strata_name = \"sex\",     strata_level = \"male\",     variable_name = \"Age group\",     variable_level = \"10 to 50\",     estimate_name = \"count\",     estimate_type = \"numeric\",     estimate_value = \"5\",     additional_name = \"overall\",     additional_level = \"overall\"   ),   settings = tibble(     result_id = 1L,     package_name = \"PatientProfiles\",     package_version = \"1.0.0\",     study = \"my_characterisation_study\",     result_type = \"stratified_by_age_group\"   ) )  result2 <- newSummarisedResult(   x = tibble(     result_id = 1L,     cdm_name = \"my_cdm\",     group_name = \"overall\",     group_level = \"overall\",     strata_name = \"overall\",     strata_level = \"overall\",     variable_name = \"overall\",     variable_level = \"overall\",     estimate_name = \"count\",     estimate_type = \"numeric\",     estimate_value = \"55\",     additional_name = \"overall\",     additional_level = \"overall\"   ),   settings = tibble(     result_id = 1L,     package_name = \"PatientProfiles\",     package_version = \"1.0.0\",     study = \"my_characterisation_study\",     result_type = \"overall_analysis\"   ) ) result <- bind(result1, result2) result |>   dplyr::glimpse() #> Rows: 2 #> Columns: 13 #> $ result_id        <int> 1, 2 #> $ cdm_name         <chr> \"my_cdm\", \"my_cdm\" #> $ group_name       <chr> \"cohort_name\", \"overall\" #> $ group_level      <chr> \"cohort1\", \"overall\" #> $ strata_name      <chr> \"sex\", \"overall\" #> $ strata_level     <chr> \"male\", \"overall\" #> $ variable_name    <chr> \"Age group\", \"overall\" #> $ variable_level   <chr> \"10 to 50\", \"overall\" #> $ estimate_name    <chr> \"count\", \"count\" #> $ estimate_type    <chr> \"numeric\", \"numeric\" #> $ estimate_value   <chr> \"5\", \"55\" #> $ additional_name  <chr> \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\" settings(result) #> # A tibble: 2 × 9 #>   result_id result_type     package_name package_version group strata additional #>       <int> <chr>           <chr>        <chr>           <chr> <chr>  <chr>      #> 1         1 stratified_by_… PatientProf… 1.0.0           \"coh… \"sex\"  \"\"         #> 2         2 overall_analys… PatientProf… 1.0.0           \"\"    \"\"     \"\"         #> # ℹ 2 more variables: min_cell_count <chr>, study <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"minimum-cell-count-suppression","dir":"Articles","previous_headings":"","what":"Minimum cell count suppression","title":"A summarised result","text":"summarised result, can suppress results based minimum cell count. minCellCount suppression recorded settings object:","code":"result |>   suppress(minCellCount = 7) |>   glimpse() #> Rows: 2 #> Columns: 13 #> $ result_id        <int> 1, 2 #> $ cdm_name         <chr> \"my_cdm\", \"my_cdm\" #> $ group_name       <chr> \"cohort_name\", \"overall\" #> $ group_level      <chr> \"cohort1\", \"overall\" #> $ strata_name      <chr> \"sex\", \"overall\" #> $ strata_level     <chr> \"male\", \"overall\" #> $ variable_name    <chr> \"Age group\", \"overall\" #> $ variable_level   <chr> \"10 to 50\", \"overall\" #> $ estimate_name    <chr> \"count\", \"count\" #> $ estimate_type    <chr> \"numeric\", \"numeric\" #> $ estimate_value   <chr> \"-\", \"55\" #> $ additional_name  <chr> \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\" resultSuppressed <- result |> suppress(minCellCount = 10) settings(result) #> # A tibble: 2 × 9 #>   result_id result_type     package_name package_version group strata additional #>       <int> <chr>           <chr>        <chr>           <chr> <chr>  <chr>      #> 1         1 stratified_by_… PatientProf… 1.0.0           \"coh… \"sex\"  \"\"         #> 2         2 overall_analys… PatientProf… 1.0.0           \"\"    \"\"     \"\"         #> # ℹ 2 more variables: min_cell_count <chr>, study <chr> settings(resultSuppressed) #> # A tibble: 2 × 9 #>   result_id result_type     package_name package_version group strata additional #>       <int> <chr>           <chr>        <chr>           <chr> <chr>  <chr>      #> 1         1 stratified_by_… PatientProf… 1.0.0           \"coh… \"sex\"  \"\"         #> 2         2 overall_analys… PatientProf… 1.0.0           \"\"    \"\"     \"\"         #> # ℹ 2 more variables: min_cell_count <chr>, study <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"how-suppression-works","dir":"Articles","previous_headings":"Minimum cell count suppression","what":"How suppression works","title":"A summarised result","text":"three levels suppression: record level suppression: records word ‘count’ contained “estimate_name” value suppressed numeric value smaller minCellCount. linked suppression: count estimate_name: ‘my_precious_count’ suppressed exist estimate named ‘my_precious_percentage’ : result_id, cdm_name, group_name, group_level, strata_name, strata_level, variable_name, variable_level, additional_name, additional_level; estimate also suppressed. suppression variable_name level: estimates : result_id, cdm_name, group_name, group_level, strata_name, strata_level, variable_name, additional_name, additional_level; suppressed exist exist estimate estimate_name %% c(“count”, “denominator_count”, “outcome_count”, “record_count”, “subject_count”) suppressed. suppression group level: estimates : result_id, cdm_name, group_name, group_level, strata_name, strata_level, additional_name, additional_level; suppressed exist variable_name %% c(“number subjects”, “number records”) suppressed. can see source code cell suppression : https://github.com/darwin-eu/omopgenerics/blob/main/R/methodSuppress.R.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"export-and-import-summarised-results","dir":"Articles","previous_headings":"","what":"Export and import summarised results","title":"A summarised result","text":"summarised_result object can exported imported .csv file following functions: importSummarisedResult() exportSummarisedResult() Note exportSummarisedResult also suppresses results. Note settings included csv file: can later import results back importSummarisedResult():","code":"x <- tempdir() files <- list.files(x)  exportSummarisedResult(result, path = x, fileName = \"result.csv\") setdiff(list.files(x), files) #> [1] \"result.csv\" #> \"result_id\",\"cdm_name\",\"group_name\",\"group_level\",\"strata_name\",\"strata_level\",\"variable_name\",\"variable_level\",\"estimate_name\",\"estimate_type\",\"estimate_value\",\"additional_name\",\"additional_level\" \"1\",\"my_cdm\",\"cohort_name\",\"cohort1\",\"sex\",\"male\",\"Age group\",\"10 to 50\",\"count\",\"numeric\",\"5\",\"overall\",\"overall\" \"2\",\"my_cdm\",\"overall\",\"overall\",\"overall\",\"overall\",\"overall\",\"overall\",\"count\",\"numeric\",\"55\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"result_type\",\"character\",\"stratified_by_age_group\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"package_name\",\"character\",\"PatientProfiles\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"package_version\",\"character\",\"1.0.0\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"group\",\"character\",\"cohort_name\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"strata\",\"character\",\"sex\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"additional\",\"character\",\"\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"min_cell_count\",\"character\",\"5\",\"overall\",\"overall\" \"1\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"study\",\"character\",\"my_characterisation_study\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"result_type\",\"character\",\"overall_analysis\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"package_name\",\"character\",\"PatientProfiles\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"package_version\",\"character\",\"1.0.0\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"group\",\"character\",\"\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"strata\",\"character\",\"\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"additional\",\"character\",\"\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"min_cell_count\",\"character\",\"5\",\"overall\",\"overall\" \"2\",NA,\"overall\",\"overall\",\"overall\",\"overall\",\"settings\",NA,\"study\",\"character\",\"my_characterisation_study\",\"overall\",\"overall\" res <- importSummarisedResult(path = file.path(x, \"result.csv\")) class(res) #> [1] \"summarised_result\" \"omop_result\"       \"tbl_df\"            #> [4] \"tbl\"               \"data.frame\" res |>   glimpse() #> Rows: 2 #> Columns: 13 #> $ result_id        <int> 1, 2 #> $ cdm_name         <chr> \"my_cdm\", \"my_cdm\" #> $ group_name       <chr> \"cohort_name\", \"overall\" #> $ group_level      <chr> \"cohort1\", \"overall\" #> $ strata_name      <chr> \"sex\", \"overall\" #> $ strata_level     <chr> \"male\", \"overall\" #> $ variable_name    <chr> \"Age group\", \"overall\" #> $ variable_level   <chr> \"10 to 50\", \"overall\" #> $ estimate_name    <chr> \"count\", \"count\" #> $ estimate_type    <chr> \"numeric\", \"numeric\" #> $ estimate_value   <chr> \"5\", \"55\" #> $ additional_name  <chr> \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\" res |>   settings() #> # A tibble: 2 × 9 #>   result_id result_type     package_name package_version group strata additional #>       <int> <chr>           <chr>        <chr>           <chr> <chr>  <chr>      #> 1         1 stratified_by_… PatientProf… 1.0.0           \"coh… \"sex\"  \"\"         #> 2         2 overall_analys… PatientProf… 1.0.0           \"\"    \"\"     \"\"         #> # ℹ 2 more variables: min_cell_count <chr>, study <chr>"},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"tidy-method","dir":"Articles","previous_headings":"Tidy a <summarised_result>","what":"Tidy method","title":"A summarised result","text":"ompgenerics defines method tidy <summarised_result> object, function :","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"split-group-strata-and-additional-pairs-into-separate-columns","dir":"Articles","previous_headings":"Tidy a <summarised_result> > Tidy method","what":"1. Split group, strata, and additional pairs into separate columns:","title":"A summarised result","text":"<summarised_result> object following pair columns: group_name-group_level, strata_name-strata_level, additional_name-additional_level. pairs use &&& separator combine multiple fields, example want combine cohort_name age_group group_name-group_level pair: group_name = \"cohort_name &&& age_group\" group_level = \"my_cohort &&& <40\". default aggregation produced group_name-group_level pair: group_name = \"overall\" group_level = \"overall\". ORIGINAL FORMAT: tidy format puts one values columns. Making easier manipulate time output standardised anymore <summarised_result> object different number names columns. Missing values filled “overall” label. TIDY FORMAT:","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"add-settings-of-the-summarised_result-object-as-columns","dir":"Articles","previous_headings":"Tidy a <summarised_result> > Tidy method","what":"2. Add settings of the <summarised_result> object as columns:","title":"A summarised result","text":"<summarised_result> object setting attribute relates ‘result_id’ column different set settings. columns ‘result_type’, ‘package_name’ ‘package_version’ always present settings, may extra parameters depending object created. <summarised_result> format need use settings() functions see variables: ORIGINAL FORMAT: settings: <summarised_result>: tidy format add settings columns, making value repeated multiple times (one row per result_id settings, whereas can multiple rows <summarised_result> object). column ‘result_id’ eliminated provide information anymore. loose standardisation (multiple different settings), gain flexibility: TIDY FORMAT:","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"pivot-estimates-as-columns","dir":"Articles","previous_headings":"Tidy a <summarised_result> > Tidy method","what":"3. Pivot estimates as columns:","title":"A summarised result","text":"<summarised_result> format estimates displayed 3 columns: ‘estimate_name’ indicates name estimate. ‘estimate_type’ indicates type estimate (casted character). Possible values : numeric, integer, date, character, proportion, percentage, logical. ‘estimate_value’ value estimate <character>. ORIGINAL FORMAT: tidy format pivot estimates, creating new column one ‘estimate_name’ values. columns casted ‘estimate_type’. multiple estimate_type(s) estimate_name won’t casted displayed character (warning thrown). Missing data populated NAs. TIDY FORMAT:","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"example","dir":"Articles","previous_headings":"Tidy a <summarised_result> > Tidy method","what":"Example","title":"A summarised result","text":"Let’s see simple example toy data:","code":"result |>   tidy() #> # A tibble: 2 × 7 #>   cdm_name cohort_name sex     variable_name variable_level count study          #>   <chr>    <chr>       <chr>   <chr>         <chr>          <dbl> <chr>          #> 1 my_cdm   cohort1     male    Age group     10 to 50           5 my_characteri… #> 2 my_cdm   overall     overall overall       overall           55 my_characteri…"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"split","dir":"Articles","previous_headings":"Tidy a <summarised_result>","what":"Split","title":"A summarised result","text":"functions split provided independent: splitGroup() splits pair group_name-group_level columns. splitStrata() splits pair strata_name-strata_level columns. splitAdditional() splits pair additional_name-additional_level columns. also function: - splitAll() splits pair x_name-x_level found data.","code":"splitAll(result) #> # A tibble: 2 × 9 #>   result_id cdm_name cohort_name sex     variable_name variable_level #>       <int> <chr>    <chr>       <chr>   <chr>         <chr>          #> 1         1 my_cdm   cohort1     male    Age group     10 to 50       #> 2         2 my_cdm   overall     overall overall       overall        #> # ℹ 3 more variables: estimate_name <chr>, estimate_type <chr>, #> #   estimate_value <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"pivot-estimates","dir":"Articles","previous_headings":"Tidy a <summarised_result>","what":"Pivot estimates","title":"A summarised result","text":"pivotEstimates() can used pivot variables interested . argument pivotEstimatesBy specifies variables want use pivot , four options: NULL/character() pivot anything. c(\"estimate_name\") pivot estimate_name. c(\"variable_level\", \"estimate_name\") pivot estimate_name variable_level. c(\"variable_name\", \"variable_level\", \"estimate_name\") pivot estimate_name, variable_level variable_name. Note variable_level can contain NA values, ignored naming part.","code":"pivotEstimates(   result,   pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\") ) #> # A tibble: 2 × 10 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 my_cdm   cohort_name cohort1     sex         male         #> 2         2 my_cdm   overall     overall     overall     overall      #> # ℹ 4 more variables: additional_name <chr>, additional_level <chr>, #> #   `Age group_10 to 50_count` <dbl>, overall_overall_count <dbl>"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"add-settings","dir":"Articles","previous_headings":"Tidy a <summarised_result>","what":"Add settings","title":"A summarised result","text":"addSettings() used add settings want new columns <summarised_result> object. settingsColumn argument used choose settings want add.","code":"addSettings(   result,   settingsColumn = \"result_type\" ) #> # A tibble: 2 × 14 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 my_cdm   cohort_name cohort1     sex         male         #> 2         2 my_cdm   overall     overall     overall     overall      #> # ℹ 8 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>, result_type <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"filter","dir":"Articles","previous_headings":"Tidy a <summarised_result>","what":"Filter","title":"A summarised result","text":"Dealing <summarised_result> object can difficult handle specially trying filter. example, difficult tasks filter certain result_type many strata joined together filter one variables. hand exists tidy format makes easy filter, loose <summarised_result> object. omopgenerics package contains functionalities helps process: filterSettings filter <summarised_result> object using settings() attribute. filterGroup filter <summarised_result> object using group_name-group_level tidy columns. filterStrata filter <summarised_result> object using strata_name-starta_level tidy columns. filterAdditional filter <summarised_result> object using additional_name-additional_level tidy columns. instance, let’s filter result results males: Now let’s see example using information settings filter result. case, one results “overall_analysis”, since information result_type column settings, procees follows:","code":"result |>   filterStrata(sex == \"male\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 my_cdm   cohort_name cohort1     sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> result |>   filterSettings(result_type == \"overall_analysis\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         2 my_cdm   overall    overall     overall     overall      #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"column-retrieval-functions","dir":"Articles","previous_headings":"Utility functions for <summarised_result>","what":"Column retrieval functions","title":"A summarised result","text":"Working <summarised_result> objects often involves managing columns settings, grouping, strata, additional levels. retrieval functions help identify manage columns: settingsColumns() gives setting names available <summarised_result> object. groupColumns() gives new columns generated splitting group_name-group_level pair different columns. strataColumns() gives new columns generated splitting strata_name-strata_level pair different columns. additionalColumns() gives new columns generated splitting additional_name-additional_level pair different columns. tidyColumns() gives columns object tidy (tidy(result)). function useful know columns can included plot table functions. Let’s see different values example result data:","code":"settingsColumns(result) #> [1] \"study\" groupColumns(result) #> [1] \"cohort_name\" strataColumns(result) #> [1] \"sex\" additionalColumns(result) #> character(0) tidyColumns(result) #> [1] \"cdm_name\"       \"cohort_name\"    \"sex\"            \"variable_name\"  #> [5] \"variable_level\" \"count\"          \"study\""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"unite-functions","dir":"Articles","previous_headings":"Utility functions for <summarised_result>","what":"Unite functions","title":"A summarised result","text":"unite functions serve complementary tools split functions, allowing generate name-level pair columns targeted columns within <dataframe>. three unite functions allow create group, strata, additional name-level columns specified sets columns: uniteAdditional() uniteGroup() uniteStrata()","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/articles/summarised_result.html","id":"example-1","dir":"Articles","previous_headings":"Utility functions for <summarised_result> > Unite functions","what":"Example","title":"A summarised result","text":"example, create group_name group_level columns tibble, can use: functions can helpful creating <summarised_result>.","code":"# Create and show mock data data <- tibble(   denominator_cohort_name = c(\"general_population\", \"older_than_60\", \"younger_than_60\"),   outcome_cohort_name = c(\"stroke\", \"stroke\", \"stroke\") ) head(data) #> # A tibble: 3 × 2 #>   denominator_cohort_name outcome_cohort_name #>   <chr>                   <chr>               #> 1 general_population      stroke              #> 2 older_than_60           stroke              #> 3 younger_than_60         stroke  # Unite into group name-level columns data |>   uniteGroup(cols = c(\"denominator_cohort_name\", \"outcome_cohort_name\")) #> # A tibble: 3 × 2 #>   group_name                                      group_level                   #>   <chr>                                           <chr>                         #> 1 denominator_cohort_name &&& outcome_cohort_name general_population &&& stroke #> 2 denominator_cohort_name &&& outcome_cohort_name older_than_60 &&& stroke      #> 3 denominator_cohort_name &&& outcome_cohort_name younger_than_60 &&& stroke"},{"path":"https://darwin-eu.github.io/omopgenerics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martí Català. Author, maintainer. Edward Burn. Author. Mike Du. Contributor. Yuchen Guo. Contributor. Adam Black. Contributor. Marta Alcalde-Herraiz. Contributor.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Català M, Burn E (2025). omopgenerics: Methods Classes OMOP Common Data Model. R package version 1.2.0, https://darwin-eu.github.io/omopgenerics/.","code":"@Manual{,   title = {omopgenerics: Methods and Classes for the OMOP Common Data Model},   author = {Martí Català and Edward Burn},   year = {2025},   note = {R package version 1.2.0},   url = {https://darwin-eu.github.io/omopgenerics/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Methods and Classes for the OMOP Common Data Model","text":"omopgenerics package provides definitions core classes methods used analytic pipelines query OMOP common data model. find package useful supporting research study, please consider citing package.","code":"#> Warning in citation(\"omopgenerics\"): no date field in DESCRIPTION file of #> package 'omopgenerics' #> Warning in citation(\"omopgenerics\"): could not determine year for #> 'omopgenerics' from package DESCRIPTION file #>  #> To cite package 'omopgenerics' in publications use: #>  #>   Català M, Burn E (????). _omopgenerics: Methods and Classes for the #>   OMOP Common Data Model_. R package version 0.3.1.900, #>   <https://darwin-eu.github.io/omopgenerics/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {omopgenerics: Methods and Classes for the OMOP Common Data Model}, #>     author = {Martí Català and Edward Burn}, #>     note = {R package version 0.3.1.900}, #>     url = {https://darwin-eu.github.io/omopgenerics/}, #>   }"},{"path":"https://darwin-eu.github.io/omopgenerics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Methods and Classes for the OMOP Common Data Model","text":"can install development version OMOPGenerics GitHub : load using library command:","code":"install.packages(\"pak\") pak::pkg_install(\"darwin-eu/omopgenerics\") library(omopgenerics) library(dplyr)"},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/index.html","id":"cdm-reference","dir":"","previous_headings":"Core classes and methods","what":"CDM Reference","title":"Methods and Classes for the OMOP Common Data Model","text":"cdm reference single R object represents OMOP CDM data. tables cdm reference may database, cdm reference may also contain OMOP CDM tables dataframes/tibbles arrow. latter case cdm reference typically subset original cdm reference derived part particular analysis. omopgenerics contains class definition cdm reference dataframe implementation. creating cdm reference using database, see CDMConnector package (https://darwin-eu.github.io/CDMConnector/). cdm object can contain four type tables: Standard tables: one tables required columns. example, person table required columns: Cohort tables can see cohort-related tables required columns. addition, cohorts defined terms generatedCohortSet class. details class definition see corresponding vignette. Achilles tables Achilles R package generates descriptive statistics data contained OMOP CDM. , can see tables created required columns. tables, tables can format. table part cdm object fulfill 4 conditions: must share common source. name tables must lowercase. name column names table must lowercase. person observation_period must present.","code":"omopTables() #>  [1] \"person\"                \"observation_period\"    \"visit_occurrence\"      #>  [4] \"visit_detail\"          \"condition_occurrence\"  \"drug_exposure\"         #>  [7] \"procedure_occurrence\"  \"device_exposure\"       \"measurement\"           #> [10] \"observation\"           \"death\"                 \"note\"                  #> [13] \"note_nlp\"              \"specimen\"              \"fact_relationship\"     #> [16] \"location\"              \"care_site\"             \"provider\"              #> [19] \"payer_plan_period\"     \"cost\"                  \"drug_era\"              #> [22] \"dose_era\"              \"condition_era\"         \"metadata\"              #> [25] \"cdm_source\"            \"concept\"               \"vocabulary\"            #> [28] \"domain\"                \"concept_class\"         \"concept_relationship\"  #> [31] \"relationship\"          \"concept_synonym\"       \"concept_ancestor\"      #> [34] \"source_to_concept_map\" \"drug_strength\"         \"cohort_definition\"     #> [37] \"attribute_definition\"  \"concept_recommended\" omopColumns(table = \"person\") #>  [1] \"person_id\"                   \"gender_concept_id\"           #>  [3] \"year_of_birth\"               \"month_of_birth\"              #>  [5] \"day_of_birth\"                \"birth_datetime\"              #>  [7] \"race_concept_id\"             \"ethnicity_concept_id\"        #>  [9] \"location_id\"                 \"provider_id\"                 #> [11] \"care_site_id\"                \"person_source_value\"         #> [13] \"gender_source_value\"         \"gender_source_concept_id\"    #> [15] \"race_source_value\"           \"race_source_concept_id\"      #> [17] \"ethnicity_source_value\"      \"ethnicity_source_concept_id\" cohortTables() #> [1] \"cohort\"           \"cohort_set\"       \"cohort_attrition\" \"cohort_codelist\" cohortColumns(table = \"cohort\") #> [1] \"cohort_definition_id\" \"subject_id\"           \"cohort_start_date\"    #> [4] \"cohort_end_date\" achillesTables() #> [1] \"achilles_analysis\"     \"achilles_results\"      \"achilles_results_dist\" achillesColumns(table = \"achilles_results\") #> [1] \"analysis_id\" \"stratum_1\"   \"stratum_2\"   \"stratum_3\"   \"stratum_4\"   #> [6] \"stratum_5\"   \"count_value\""},{"path":"https://darwin-eu.github.io/omopgenerics/index.html","id":"concept-set","dir":"","previous_headings":"Core classes and methods","what":"Concept set","title":"Methods and Classes for the OMOP Common Data Model","text":"concept set can represented either codelist concept set expression. codelist named list, item list containing specific concept IDs. Meanwhile, concept set expression provides high-level definition concepts , applied specific OMOP CDM vocabulary version (making use concept hierarchies relationships), result codelist.","code":"condition_codes <- list(\"diabetes\" = c(201820, 4087682, 3655269),                         \"asthma\" = 317009) condition_codes <- newCodelist(condition_codes) #> Warning: ! `codelist` contains numeric values, they are casted to integers.  condition_codes #>  #> ── 2 codelists ───────────────────────────────────────────────────────────────── #>  #> - asthma (1 codes) #> - diabetes (3 codes) condition_cs <- list(   \"diabetes\" = dplyr::tibble(     \"concept_id\" = c(201820, 4087682),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   ),   \"asthma\" = dplyr::tibble(     \"concept_id\" = 317009,     \"excluded\" = FALSE,     \"descendants\" = FALSE,     \"mapped\" = FALSE   ) ) condition_cs <- newConceptSetExpression(condition_cs)  condition_cs #>  #> ── 2 conceptSetExpressions ───────────────────────────────────────────────────── #>  #> - asthma (1 concept criteria) #> - diabetes (2 concept criteria)"},{"path":"https://darwin-eu.github.io/omopgenerics/index.html","id":"a-cohort-table","dir":"","previous_headings":"Core classes and methods","what":"A cohort table","title":"Methods and Classes for the OMOP Common Data Model","text":"cohort set persons satisfy one inclusion criteria duration time , defined, table cdm reference cohort table class. Cohort tables associated attributes settings attrition.","code":"person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) diabetes <- tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") )  cdm <- cdmFromTables(   tables = list(     \"person\" = person,     \"observation_period\" = observation_period,     \"diabetes\" = diabetes   ),   cdmName = \"example_cdm\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer cdm$diabetes <- newCohortTable(cdm$diabetes) #> Warning: ! 2 column in diabetes do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cdm$diabetes #> # A tibble: 1 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-10 settings(cdm$diabetes) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1 attrition(cdm$diabetes) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$diabetes) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1"},{"path":"https://darwin-eu.github.io/omopgenerics/index.html","id":"summarised-result","dir":"","previous_headings":"Core classes and methods","what":"Summarised result","title":"Methods and Classes for the OMOP Common Data Model","text":"summarised result provides standard format results analysis performed data mapped OMOP CDM. example format used get summary cdm whole also summarise cohort","code":"summary(cdm) |>    dplyr::glimpse() #> Rows: 13 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"example_cdm\", \"example_cdm\", \"example_cdm\", \"example… #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"snapshot_date\", \"person_count\", \"observation_period_… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ estimate_name    <chr> \"value\", \"count\", \"count\", \"source_name\", \"version\", … #> $ estimate_type    <chr> \"date\", \"integer\", \"integer\", \"character\", \"character… #> $ estimate_value   <chr> \"2024-11-01\", \"1\", \"1\", \"\", NA, \"5.3\", \"\", \"\", \"\", \"\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… summary(cdm$diabetes) |>    dplyr::glimpse() #> Rows: 6 #> Columns: 13 #> $ result_id        <int> 1, 1, 2, 2, 2, 2 #> $ cdm_name         <chr> \"example_cdm\", \"example_cdm\", \"example_cdm\", \"example… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort_1\", \"cohort_1\", \"cohort_1\", \"cohort_1\", \"coho… #> $ strata_name      <chr> \"overall\", \"overall\", \"reason\", \"reason\", \"reason\", \"… #> $ strata_level     <chr> \"overall\", \"overall\", \"Initial qualifying events\", \"I… #> $ variable_name    <chr> \"number_records\", \"number_subjects\", \"number_records\"… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\" #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"1\", \"1\", \"1\", \"1\", \"0\", \"0\" #> $ additional_name  <chr> \"overall\", \"overall\", \"reason_id\", \"reason_id\", \"reas… #> $ additional_level <chr> \"overall\", \"overall\", \"1\", \"1\", \"1\", \"1\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns for each of the achilles result tables — achillesColumns","title":"Required columns for each of the achilles result tables — achillesColumns","text":"Required columns achilles result tables","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns for each of the achilles result tables — achillesColumns","text":"","code":"achillesColumns(table, version = \"5.3\", onlyRequired = lifecycle::deprecated())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns for each of the achilles result tables — achillesColumns","text":"table Table see required columns. One \"achilles_analysis\", \"achilles_results\", \"achilles_results_dist\". version Version OMOP Common Data Model. onlyRequired deprecated.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns for each of the achilles result tables — achillesColumns","text":"Character vector column names","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns for each of the achilles result tables — achillesColumns","text":"","code":"# \\donttest{ library(omopgenerics) achillesColumns(\"achilles_analysis\") #> [1] \"analysis_id\"    \"analysis_name\"  \"stratum_1_name\" \"stratum_2_name\" #> [5] \"stratum_3_name\" \"stratum_4_name\" \"stratum_5_name\" \"is_default\"     #> [9] \"category\"       achillesColumns(\"achilles_results\") #> [1] \"analysis_id\" \"stratum_1\"   \"stratum_2\"   \"stratum_3\"   \"stratum_4\"   #> [6] \"stratum_5\"   \"count_value\" achillesColumns(\"achilles_results_dist\") #>  [1] \"analysis_id\"  \"stratum_1\"    \"stratum_2\"    \"stratum_3\"    \"stratum_4\"    #>  [6] \"stratum_5\"    \"count_value\"  \"min_value\"    \"max_value\"    \"avg_value\"    #> [11] \"stdev_value\"  \"median_value\" \"p10_value\"    \"p25_value\"    \"p75_value\"    #> [16] \"p90_value\"    # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of the tables that contain the results of achilles analyses — achillesTables","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"Names tables contain results achilles analyses","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"","code":"achillesTables(version = \"5.3\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"Names tables contain results achilles analyses","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/achillesTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"","code":"# \\donttest{ library(omopgenerics) achillesTables() #> [1] \"achilles_analysis\"     \"achilles_results\"      \"achilles_results_dist\" # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/addSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Add settings columns to a <summarised_result> object — addSettings","title":"Add settings columns to a <summarised_result> object — addSettings","text":"Add settings columns <summarised_result> object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/addSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add settings columns to a <summarised_result> object — addSettings","text":"","code":"addSettings(result, settingsColumn = settingsColumns(result))"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/addSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add settings columns to a <summarised_result> object — addSettings","text":"result <summarised_result> object. settingsColumn Settings added columns, default settingsColumns(result) added. NULL empty character vector, settings added.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/addSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add settings columns to a <summarised_result> object — addSettings","text":"<summarised_result> object added setting columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/addSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add settings columns to a <summarised_result> object — addSettings","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> addSettings() } #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 2 × 14 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 cprd     cohort_name my_cohort   sex         male         #> 2         2 eunomia  cohort_name my_cohort   sex         male         #> # ℹ 8 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>, custom <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/additionalColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in additional_name column — additionalColumns","title":"Identify variables in additional_name column — additionalColumns","text":"Identifies returns unique values additional_name column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/additionalColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in additional_name column — additionalColumns","text":"","code":"additionalColumns(result)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/additionalColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in additional_name column — additionalColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/additionalColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in additional_name column — additionalColumns","text":"Unique values additional name column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/additionalColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in additional_name column — additionalColumns","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> additionalColumns() } #> `result_type`, `package_name`, and `package_version` added to settings. #> character(0)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertCharacter.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","title":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","text":"Assert object character fulfill certain conditions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertCharacter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","text":"","code":"assertCharacter(   x,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   minNumCharacter = 0,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertCharacter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","text":"x Variable check. length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. minNumCharacter Minimum number characters elements must . call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertChoice.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is within a certain oprtions. — assertChoice","title":"Assert that an object is within a certain oprtions. — assertChoice","text":"Assert object within certain oprtions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertChoice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is within a certain oprtions. — assertChoice","text":"","code":"assertChoice(   x,   choices,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertChoice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is within a certain oprtions. — assertChoice","text":"x Variable check. choices Options x allowed . length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object has a certain class. — assertClass","title":"Assert that an object has a certain class. — assertClass","text":"Assert object certain class.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object has a certain class. — assertClass","text":"","code":"assertClass(   x,   class,   length = NULL,   null = FALSE,   all = FALSE,   extra = TRUE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object has a certain class. — assertClass","text":"x check. class Expected class classes. length Required length. NULL length checked. null Whether can NULL. Whether classes least one . extra Whether object can extra classes. call Call argument passed cli. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Date — assertDate","title":"Assert Date — assertDate","text":"Assert Date","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Date — assertDate","text":"","code":"assertDate(   x,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Date — assertDate","text":"x Expression check. length Required length. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Date — assertDate","text":"x","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertList.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a list. — assertList","title":"Assert that an object is a list. — assertList","text":"Assert object list.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a list. — assertList","text":"","code":"assertList(   x,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   class = NULL,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a list. — assertList","text":"x Variable check. length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. class Class elements must . call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertLogical.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a logical. — assertLogical","title":"Assert that an object is a logical. — assertLogical","text":"Assert object logical.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertLogical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a logical. — assertLogical","text":"","code":"assertLogical(   x,   length = NULL,   na = FALSE,   null = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertLogical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a logical. — assertLogical","text":"x Variable check. length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertNumeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a numeric. — assertNumeric","title":"Assert that an object is a numeric. — assertNumeric","text":"Assert object numeric.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertNumeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a numeric. — assertNumeric","text":"","code":"assertNumeric(   x,   integerish = FALSE,   min = -Inf,   max = Inf,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertNumeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a numeric. — assertNumeric","text":"x Variable check. integerish Whether integer min Minimum value object can . max Maximum value object can . length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a table. — assertTable","title":"Assert that an object is a table. — assertTable","text":"Assert object table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a table. — assertTable","text":"","code":"assertTable(   x,   class = NULL,   numberColumns = NULL,   numberRows = NULL,   columns = character(),   allowExtraColumns = TRUE,   null = FALSE,   unique = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a table. — assertTable","text":"x Variable check. class class table must : \"tbl\", \"data.fram\", \"tbl_sql\", ... numberColumns Number columns contain. numberRows Number rows contain. columns Name columns required. allowExtraColumns Whether extra columns allowed. null Whether can NULL. unique Whether contain unique rows. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertTrue.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an expression is TRUE. — assertTrue","title":"Assert that an expression is TRUE. — assertTrue","text":"Assert expression TRUE.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertTrue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an expression is TRUE. — assertTrue","text":"","code":"assertTrue(x, null = FALSE, call = parent.frame(), msg = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/assertTrue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an expression is TRUE. — assertTrue","text":"x Expression check. null Whether can NULL. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"Get cohort attrition cohort_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"","code":"# S3 method for class 'cohort_table' attrition(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"x cohort_table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"table attrition.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")),   cohort_end_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")), ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) )  attrition(cdm$cohort1) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              3               1         1 Initial qualify… #> 2                    2              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attrition from an object. — attrition","title":"Get attrition from an object. — attrition","text":"Get attrition object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attrition from an object. — attrition","text":"","code":"attrition(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attrition from an object. — attrition","text":"x object get attrition summary.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/attrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get attrition from an object. — attrition","text":"table attrition.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two or more cohort tables — bind.cohort_table","title":"Bind two or more cohort tables — bind.cohort_table","text":"Bind two cohort tables","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two or more cohort tables — bind.cohort_table","text":"","code":"# S3 method for class 'cohort_table' bind(..., name)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two or more cohort tables — bind.cohort_table","text":"... Generated cohort set objects bind. least two must provided. name Name new generated cohort set.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two or more cohort tables — bind.cohort_table","text":"cdm object new generated cohort set containing cohorts passed.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind two or more cohort tables — bind.cohort_table","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cohort1 <- tibble(   cohort_definition_id = 1,   subject_id = 1:3,   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2010-01-05\") ) cohort2 <- tibble(   cohort_definition_id = c(2, 2, 3, 3, 3),   subject_id = c(1, 2, 3, 1, 2),   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2010-01-05\") ) cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\",   cohortTables = list(\"cohort1\" = cohort1, \"cohort2\" = cohort2) )  cdm <- bind(cdm$cohort1, cdm$cohort2, name = \"cohort3\") settings(cdm$cohort3) #> # A tibble: 3 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1    #> 2                    2 cohort_2    #> 3                    3 cohort_3    cdm$cohort3 #> # A tibble: 8 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #> *                <int>      <dbl> <date>            <date>          #> 1                    1          1 2010-01-01        2010-01-05      #> 2                    1          2 2010-01-01        2010-01-05      #> 3                    1          3 2010-01-01        2010-01-05      #> 4                    2          1 2010-01-01        2010-01-05      #> 5                    2          2 2010-01-01        2010-01-05      #> 6                    3          3 2010-01-01        2010-01-05      #> 7                    3          1 2010-01-01        2010-01-05      #> 8                    3          2 2010-01-01        2010-01-05"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two or more objects of the same class. — bind","title":"Bind two or more objects of the same class. — bind","text":"Bind two objects class.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two or more objects of the same class. — bind","text":"","code":"bind(...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two or more objects of the same class. — bind","text":"... Objects bind.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two or more objects of the same class. — bind","text":"New object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two or summarised_result objects — bind.summarised_result","title":"Bind two or summarised_result objects — bind.summarised_result","text":"Bind two summarised_result objects","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two or summarised_result objects — bind.summarised_result","text":"","code":"# S3 method for class 'summarised_result' bind(...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two or summarised_result objects — bind.summarised_result","text":"... summarised_result objects","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two or summarised_result objects — bind.summarised_result","text":"summarised_result object merged objects.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/bind.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind two or summarised_result objects — bind.summarised_result","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\",   cohortTables = list(\"cohort1\" = tibble(     cohort_definition_id = 1,     subject_id = 1:3,     cohort_start_date = as.Date(\"2010-01-01\"),     cohort_end_date = as.Date(\"2010-01-05\")   )) )  result1 <- summary(cdm) result2 <- summary(cdm$cohort1) #> `cohort_definition_id` casted to character. #> `cohort_definition_id` casted to character.  mergedResult <- bind(result1, result2) mergedResult #> # A tibble: 19 × 13 #>    result_id cdm_name group_name  group_level strata_name strata_level           #>        <int> <chr>    <chr>       <chr>       <chr>       <chr>                  #>  1         1 mock     overall     overall     overall     overall                #>  2         1 mock     overall     overall     overall     overall                #>  3         1 mock     overall     overall     overall     overall                #>  4         1 mock     overall     overall     overall     overall                #>  5         1 mock     overall     overall     overall     overall                #>  6         1 mock     overall     overall     overall     overall                #>  7         1 mock     overall     overall     overall     overall                #>  8         1 mock     overall     overall     overall     overall                #>  9         1 mock     overall     overall     overall     overall                #> 10         1 mock     overall     overall     overall     overall                #> 11         1 mock     overall     overall     overall     overall                #> 12         1 mock     overall     overall     overall     overall                #> 13         1 mock     overall     overall     overall     overall                #> 14         2 mock     cohort_name cohort_1    overall     overall                #> 15         2 mock     cohort_name cohort_1    overall     overall                #> 16         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> 17         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> 18         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> 19         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm reference object. — $.cdm_reference","title":"Subset a cdm reference object. — $.cdm_reference","text":"Subset cdm reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm reference object. — $.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' x$name"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm reference object. — $.cdm_reference","text":"x cdm reference. name name table extract cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm reference object. — $.cdm_reference","text":"single cdm table reference","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cdm reference object. — $.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdm$person #> # A tibble: 3 × 5 #>   person_id gender_concept_id year_of_birth race_concept_id ethnicity_concept_id #> *     <dbl>             <dbl>         <dbl>           <dbl>                <dbl> #> 1         1                 0          1990               0                    0 #> 2         2                 0          1990               0                    0 #> 3         3                 0          1990               0                    0 # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign an table to a cdm reference. — $<-.cdm_reference","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"Assign table cdm reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' cdm$name <- value"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"cdm cdm reference. name Name assign new table. value Table source cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"cdm reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics)  cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdm$person #> # A tibble: 3 × 5 #>   person_id gender_concept_id year_of_birth race_concept_id ethnicity_concept_id #> *     <dbl>             <dbl>         <dbl>           <dbl>                <dbl> #> 1         1                 0          1990               0                    0 #> 2         2                 0          1990               0                    0 #> 3         3                 0          1990               0                    0 # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmDisconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Disconnect from a cdm object. — cdmDisconnect","title":"Disconnect from a cdm object. — cdmDisconnect","text":"Disconnect cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmDisconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disconnect from a cdm object. — cdmDisconnect","text":"","code":"cdmDisconnect(cdm, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmDisconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disconnect from a cdm object. — cdmDisconnect","text":"cdm cdm reference source cdm reference. ... Used consistency.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmDisconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disconnect from a cdm object. — cdmDisconnect","text":"TRUE process wass successful. library(omopgenerics) library(dplyr, warn.conflicts = FALSE) person <- tibble( person_id = 1, gender_concept_id = 0, year_of_birth = 1990, race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble( observation_period_id = 1, person_id = 1, observation_period_start_date = .Date(\"2000-01-01\"), observation_period_end_date = .Date(\"2023-12-31\"), period_type_concept_id = 0 ) cdm <- cdmFromTables( tables = list(\"person\" = person, \"observation_period\" = observation_period), cdmName = \"mock\" ) cdmDisconnect(cdm)","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmFromTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cdm object from local tables — cdmFromTables","title":"Create a cdm object from local tables — cdmFromTables","text":"Create cdm object local tables","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmFromTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cdm object from local tables — cdmFromTables","text":"","code":"cdmFromTables(tables, cdmName, cohortTables = list(), cdmVersion = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmFromTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cdm object from local tables — cdmFromTables","text":"tables List tables part cdm object. cdmName Name cdm object. cohortTables List tables contains cohort, cohort_set cohort_attrition can provided attributes. cdmVersion Version cdm_reference","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmFromTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cdm object from local tables — cdmFromTables","text":"cdm_reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmFromTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cdm object from local tables — cdmFromTables","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" ) # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of a cdm_reference associated object — cdmName","title":"Get the name of a cdm_reference associated object — cdmName","text":"Get name cdm_reference associated object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of a cdm_reference associated object — cdmName","text":"","code":"cdmName(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of a cdm_reference associated object — cdmName","text":"x cdm_reference cdm_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of a cdm_reference associated object — cdmName","text":"Name cdm_reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of a cdm_reference associated object — cdmName","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdmName(cdm) #> [1] \"mock\"  cdmName(cdm$person) #> [1] \"mock\" # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmReference.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cdm_reference of a cdm_table. — cdmReference","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"Get cdm_reference cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"","code":"cdmReference(table)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"table cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmReference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"cdm_reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmReference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdmReference(cdm$person) #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict the cdm object to a subset of tables. — cdmSelect","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"Restrict cdm object subset tables.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"","code":"cdmSelect(cdm, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"cdm cdm_reference object. ... Selection tables use, supports tidyselect expressions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"cdm_reference specified tables.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"","code":"cdm <- emptyCdmReference(\"my cdm\") cdm #>  #> ── # OMOP CDM reference (local) of my cdm ────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: -  cdm |>   cdmSelect(\"person\") #>  #> ── # OMOP CDM reference (local) of my cdm ────────────────────────────────────── #> • omop tables: person #> • cohort tables: - #> • achilles tables: - #> • other tables: -"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cdmSource of an object. — cdmSource","title":"Get the cdmSource of an object. — cdmSource","text":"Get cdmSource object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cdmSource of an object. — cdmSource","text":"","code":"cdmSource(x, cdm = lifecycle::deprecated())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cdmSource of an object. — cdmSource","text":"x Object obtain cdmSource. cdm Deprecated, use x please.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cdmSource of an object. — cdmSource","text":"cdm_source object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cdmSource of an object. — cdmSource","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdmSource(cdm) #> This is a local cdm source cdmSource(cdm$person) #> This is a local cdm source # }"},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSourceType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"","code":"cdmSourceType(cdm)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSourceType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"cdm cdm_reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSourceType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"character vector type source cdm_reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmSourceType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdmSourceType(cdm) #> Warning: `cdmSourceType()` was deprecated in omopgenerics 0.3.0. #> ℹ Please use `sourceType()` instead. #> [1] \"local\" # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmTableFromSource.html","id":null,"dir":"Reference","previous_headings":"","what":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"internal developer focused function creates cdm_table table shares source cdm_table. Please use insertTable want insert table cdm_reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmTableFromSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"","code":"cdmTableFromSource(src, value)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmTableFromSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"src cdm_source object. value table shares source cdm_reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmTableFromSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the version of an object. — cdmVersion","title":"Get the version of an object. — cdmVersion","text":"Get version object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the version of an object. — cdmVersion","text":"","code":"cdmVersion(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the version of an object. — cdmVersion","text":"x Object know cdm version object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the version of an object. — cdmVersion","text":"character vector indicating cdm version.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cdmVersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the version of an object. — cdmVersion","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdmVersion(cdm) #> [1] \"5.3\" cdmVersion(cdm$person) #> [1] \"5.3\" # }"},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/reference/checkCohortRequirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a cohort table satisfies requirements — checkCohortRequirements","text":"","code":"checkCohortRequirements(   cohort,   checkEndAfterStart = TRUE,   checkOverlappingEntries = TRUE,   checkMissingValues = TRUE,   checkInObservation = TRUE,   type = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/checkCohortRequirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a cohort table satisfies requirements — checkCohortRequirements","text":"cohort cohort_table object. checkEndAfterStart TRUE check cohort end dates come cohort start date performed. checkOverlappingEntries TRUE check individuals overlapping cohort entries performed. checkMissingValues TRUE check missing values required fields performed. checkInObservation TRUE check cohort entries within individuals observation periods performed. type Can either \"error\" \"warning\". \"error\" check failure result error, whereas \"warning\" check failure result warning. call call return error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/checkCohortRequirements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a cohort table satisfies requirements — checkCohortRequirements","text":"error returned selected checks fail.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get codelist from a cohort_table object. — cohortCodelist","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"Get codelist cohort_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"","code":"cohortCodelist(   cohortTable,   cohortId,   codelistType = c(\"index event\", \"inclusion criteria\", \"exit criteria\"),   type = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"cohortTable cohort_table object. cohortId particular cohort definition id present cohort table. codelistType reason codelist. Can \"index event\", \"inclusion criteria\", \"exit criteria\". type deprecated.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"table codelists used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )),   cohort_end_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )) ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) ) cdm$cohort1 <- newCohortTable(table = cdm$cohort1,                                 cohortCodelistRef = dplyr::tibble(                                 cohort_definition_id = c(1,1,1,2,2),                                 codelist_name =c(\"disease X\", \"disease X\", \"disease X\",                                                  \"disease Y\", \"disease Y\"),                                 concept_id = c(1,2,3,4,5),                                 codelist_type = \"index event\"                               )) cohortCodelist(cdm$cohort1, cohortId = 1, codelistType = \"index event\") #> Warning: ! `codelist` casted to integers. #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - disease X (3 codes) # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns for a generated cohort set. — cohortColumns","title":"Required columns for a generated cohort set. — cohortColumns","text":"Required columns generated cohort set.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns for a generated cohort set. — cohortColumns","text":"","code":"cohortColumns(table, version = \"5.3\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns for a generated cohort set. — cohortColumns","text":"table Either cohort, cohort_set cohort_attrition version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns for a generated cohort set. — cohortColumns","text":"Character vector column names Required columns","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns for a generated cohort set. — cohortColumns","text":"","code":"# \\donttest{ library(omopgenerics) cohortColumns(\"cohort\") #> [1] \"cohort_definition_id\" \"subject_id\"           \"cohort_start_date\"    #> [4] \"cohort_end_date\"      # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort counts from a cohort_table object. — cohortCount","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"Get cohort counts cohort_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"","code":"cohortCount(cohort)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"cohort cohort_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"table counts.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )),   cohort_end_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )), ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) )  cohortCount(cdm$cohort1) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              3               1 #> 2                    2              1               1 # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"Cohort tables cdm reference can contain OMOP Common Data Model.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"","code":"cohortTables(version = \"5.3\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"cohort tables","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/cohortTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"","code":"# \\donttest{ library(omopgenerics) cohortTables() #> [1] \"cohort\"           \"cohort_set\"       \"cohort_attrition\" \"cohort_codelist\"  # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"Retrieves cdm reference local cdm.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' collect(x, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"x cdm_reference object. ... compatibility , used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"local cdm_reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  collect(cdm) #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"To collect a cohort_table object. — collect.cohort_table","title":"To collect a cohort_table object. — collect.cohort_table","text":"collect cohort_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To collect a cohort_table object. — collect.cohort_table","text":"","code":"# S3 method for class 'cohort_table' collect(x, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To collect a cohort_table object. — collect.cohort_table","text":"x cohort_table object. ... used (compatibility).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/collect.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To collect a cohort_table object. — collect.cohort_table","text":"data frame cohort_table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/combineStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide all combinations of strata levels. — combineStrata","title":"Provide all combinations of strata levels. — combineStrata","text":"Provide combinations strata levels.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/combineStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide all combinations of strata levels. — combineStrata","text":"","code":"combineStrata(levels, overall = FALSE)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/combineStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide all combinations of strata levels. — combineStrata","text":"levels Vector strata levels combine. overall Whether provide empty element character().","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/combineStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide all combinations of strata levels. — combineStrata","text":"vector combinations strata.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/combineStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide all combinations of strata levels. — combineStrata","text":"","code":"combineStrata(character()) #> list() combineStrata(character(), overall = TRUE) #> [[1]] #> character(0) #>  combineStrata(c(\"age\", \"sex\"), overall = TRUE) #> [[1]] #> character(0) #>  #> [[2]] #> [1] \"age\" #>  #> [[3]] #> [1] \"sex\" #>  #> [[4]] #> [1] \"age\" \"sex\" #>  combineStrata(c(\"age\", \"sex\", \"year\")) #> [[1]] #> [1] \"age\" #>  #> [[2]] #> [1] \"sex\" #>  #> [[3]] #> [1] \"year\" #>  #> [[4]] #> [1] \"age\" \"sex\" #>  #> [[5]] #> [1] \"age\"  \"year\" #>  #> [[6]] #> [1] \"sex\"  \"year\" #>  #> [[7]] #> [1] \"age\"  \"sex\"  \"year\" #>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/compute.cdm_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Store results in a table. — compute.cdm_table","title":"Store results in a table. — compute.cdm_table","text":"Store results table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/compute.cdm_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store results in a table. — compute.cdm_table","text":"","code":"# S3 method for class 'cdm_table' compute(   x,   name = NULL,   temporary = NULL,   overwrite = TRUE,   logPrefix = NULL,   ... )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/compute.cdm_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store results in a table. — compute.cdm_table","text":"x Table cdm. name Name store table . temporary Whether store table temporarily (TRUE) permanently (FALSE). overwrite Whether overwrite previously existing table name . logPrefix Prefix use saving log file. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/compute.cdm_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store results in a table. — compute.cdm_table","text":"Reference table cdm","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/createLogFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a log file — createLogFile","title":"Create a log file — createLogFile","text":"Create log file","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/createLogFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a log file — createLogFile","text":"","code":"createLogFile(logFile = here::here(\"log_{date}_{time}\"))"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/createLogFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a log file — createLogFile","text":"logFile File path write logging messages. can use '{date}' '{time}' add date time log file name.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/createLogFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a log file — createLogFile","text":"Invisible TRUE logger created correctly.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/createLogFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a log file — createLogFile","text":"","code":"library(dplyr)  logFile <- tempfile(pattern = \"log_{date}_{time}\", fileext = \".txt\") createLogFile(logFile = logFile) #> ℹ Creating log file: /tmp/RtmpYgzGMz/log_2025_05_21_17_38_481d9e1bdc28b6.txt. #> [2025-05-21 17:38:48] - Log file created  logMessage(\"Starting analysis\") #> [2025-05-21 17:38:48] - Starting analysis 1 + 1 #> [1] 2 logMessage(\"Analysis finished\") #> [2025-05-21 17:38:48] - Analysis finished  res <- summariseLogFile() #> [2025-05-21 17:38:48] - Exporting log file  glimpse(res) #> Rows: 4 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1 #> $ cdm_name         <chr> \"unknown\", \"unknown\", \"unknown\", \"unknown\" #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ strata_name      <chr> \"log_id\", \"log_id\", \"log_id\", \"log_id\" #> $ strata_level     <chr> \"1\", \"2\", \"3\", \"4\" #> $ variable_name    <chr> \"Log file created\", \"Starting analysis\", \"Analysis fi… #> $ variable_level   <chr> NA, NA, NA, NA #> $ estimate_name    <chr> \"date_time\", \"date_time\", \"date_time\", \"date_time\" #> $ estimate_type    <chr> \"character\", \"character\", \"character\", \"character\" #> $ estimate_value   <chr> \"2025-05-21 17:38:48\", \"2025-05-21 17:38:48\", \"2025-0… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\"  tidy(res) #> # A tibble: 4 × 5 #>   cdm_name log_id variable_name      variable_level date_time           #>   <chr>    <chr>  <chr>              <chr>          <chr>               #> 1 unknown  1      Log file created   NA             2025-05-21 17:38:48 #> 2 unknown  2      Starting analysis  NA             2025-05-21 17:38:48 #> 3 unknown  3      Analysis finished  NA             2025-05-21 17:38:48 #> 4 unknown  4      Exporting log file NA             2025-05-21 17:38:48"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropSourceTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a table from a cdm object. — dropSourceTable","title":"Drop a table from a cdm object. — dropSourceTable","text":"Drop table cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropSourceTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a table from a cdm object. — dropSourceTable","text":"","code":"dropSourceTable(cdm, name)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropSourceTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a table from a cdm object. — dropSourceTable","text":"cdm cdm reference. name Name(s) table(s) insert. Tidyselect statements supported.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropSourceTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a table from a cdm object. — dropSourceTable","text":"table cdm reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a table from a cdm object.  — dropTable","title":"Drop a table from a cdm object.  — dropTable","text":"Drop table cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a table from a cdm object.  — dropTable","text":"","code":"dropTable(cdm, name)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a table from a cdm object.  — dropTable","text":"cdm cdm reference. name Name(s) table(s) drop Tidyselect statements supported.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/dropTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a table from a cdm object.  — dropTable","text":"cdm reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyAchillesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty achilles table — emptyAchillesTable","title":"Create an empty achilles table — emptyAchillesTable","text":"Create empty achilles table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty achilles table — emptyAchillesTable","text":"","code":"emptyAchillesTable(cdm, name)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty achilles table — emptyAchillesTable","text":"cdm cdm_reference create table. name Name table create.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty achilles table — emptyAchillesTable","text":"cdm_reference achilles empty table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty achilles table — emptyAchillesTable","text":"","code":"# \\donttest{ library(omopgenerics) cdm <- emptyCdmReference(\"my_example_cdm\") emptyAchillesTable(cdm = cdm, name = \"achilles_results\") #>  #> ── # OMOP CDM reference (local) of my_example_cdm ────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: achilles_results #> • other tables: - # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCdmReference.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty cdm_reference — emptyCdmReference","title":"Create an empty cdm_reference — emptyCdmReference","text":"Create empty cdm_reference","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCdmReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty cdm_reference — emptyCdmReference","text":"","code":"emptyCdmReference(cdmName, cdmVersion = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCdmReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty cdm_reference — emptyCdmReference","text":"cdmName Name cdm_reference cdmVersion Version cdm_reference","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCdmReference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty cdm_reference — emptyCdmReference","text":"empty cdm_reference","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCdmReference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty cdm_reference — emptyCdmReference","text":"","code":"# \\donttest{ library(omopgenerics) emptyCdmReference(cdmName = \"my_example_cdm\") #>  #> ── # OMOP CDM reference (local) of my_example_cdm ────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty codelist object. — emptyCodelist","title":"Empty codelist object. — emptyCodelist","text":"Empty codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty codelist object. — emptyCodelist","text":"","code":"emptyCodelist()"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empty codelist object. — emptyCodelist","text":"empty codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empty codelist object. — emptyCodelist","text":"","code":"emptyCodelist() #> list()"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty codelist object. — emptyCodelistWithDetails","title":"Empty codelist object. — emptyCodelistWithDetails","text":"Empty codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty codelist object. — emptyCodelistWithDetails","text":"","code":"emptyCodelistWithDetails()"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empty codelist object. — emptyCodelistWithDetails","text":"empty codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empty codelist object. — emptyCodelistWithDetails","text":"","code":"emptyCodelistWithDetails() #>  #> ── 0 codelists with details ──────────────────────────────────────────────────── #>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCohortTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty cohort_table object — emptyCohortTable","title":"Create an empty cohort_table object — emptyCohortTable","text":"Create empty cohort_table object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCohortTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty cohort_table object — emptyCohortTable","text":"","code":"emptyCohortTable(cdm, name, overwrite = TRUE)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCohortTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty cohort_table object — emptyCohortTable","text":"cdm cdm_reference create table. name Name table create. overwrite Whether overwrite existent table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCohortTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty cohort_table object — emptyCohortTable","text":"cdm_reference empty cohort table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyCohortTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty cohort_table object — emptyCohortTable","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" )  cdm <- emptyCohortTable(cdm, \"my_empty_cohort\")  cdm #>  #> ── # OMOP CDM reference (local) of test ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: my_empty_cohort #> • achilles tables: - #> • other tables: - cdm$my_empty_cohort #> # A tibble: 0 × 4 #> # ℹ 4 variables: cohort_definition_id <int>, subject_id <int>, #> #   cohort_start_date <date>, cohort_end_date <date> settings(cdm$my_empty_cohort) #> # A tibble: 0 × 2 #> # ℹ 2 variables: cohort_definition_id <int>, cohort_name <chr> attrition(cdm$my_empty_cohort) #> # A tibble: 0 × 7 #> # ℹ 7 variables: cohort_definition_id <int>, number_records <int>, #> #   number_subjects <int>, reason_id <int>, reason <chr>, #> #   excluded_records <int>, excluded_subjects <int> cohortCount(cdm$my_empty_cohort) #> # A tibble: 0 × 3 #> # ℹ 3 variables: cohort_definition_id <int>, number_records <int>, #> #   number_subjects <int>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty omop table — emptyOmopTable","title":"Create an empty omop table — emptyOmopTable","text":"Create empty omop table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty omop table — emptyOmopTable","text":"","code":"emptyOmopTable(cdm, name)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty omop table — emptyOmopTable","text":"cdm cdm_reference create table. name Name table create.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty omop table — emptyOmopTable","text":"cdm_reference empty cohort table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptyOmopTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty omop table — emptyOmopTable","text":"","code":"library(omopgenerics)  person <- dplyr::tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" )  cdm <- emptyOmopTable(cdm, \"drug_exposure\")  cdm$drug_exposure #> # A tibble: 0 × 23 #> # ℹ 23 variables: drug_exposure_id <int>, person_id <int>, #> #   drug_concept_id <int>, drug_exposure_start_date <date>, #> #   drug_exposure_start_datetime <date>, drug_exposure_end_date <date>, #> #   drug_exposure_end_datetime <date>, verbatim_end_date <date>, #> #   drug_type_concept_id <int>, stop_reason <chr>, refills <int>, #> #   quantity <dbl>, days_supply <int>, sig <chr>, route_concept_id <int>, #> #   lot_number <chr>, provider_id <int>, visit_occurrence_id <int>, …"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptySummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty summarised_result object. — emptySummarisedResult","title":"Empty summarised_result object. — emptySummarisedResult","text":"Empty summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty summarised_result object. — emptySummarisedResult","text":"","code":"emptySummarisedResult(settings = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empty summarised_result object. — emptySummarisedResult","text":"settings Tibble/data.frame settings empty summarised_result. contain least result_id column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empty summarised_result object. — emptySummarisedResult","text":"empty summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empty summarised_result object. — emptySummarisedResult","text":"","code":"library(omopgenerics)  emptySummarisedResult() #> # A tibble: 0 × 13 #> # ℹ 13 variables: result_id <int>, cdm_name <chr>, group_name <chr>, #> #   group_level <chr>, strata_name <chr>, strata_level <chr>, #> #   variable_name <chr>, variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/estimateTypeChoices.html","id":null,"dir":"Reference","previous_headings":"","what":"Choices that can be present in estimate_type column. — estimateTypeChoices","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"Choices can present estimate_type column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/estimateTypeChoices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"","code":"estimateTypeChoices()"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/estimateTypeChoices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"character vector options can present estimate_type column summarised_result objects.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/estimateTypeChoices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"","code":"library(omopgenerics)  estimateTypeChoices() #> [1] \"numeric\"    \"integer\"    \"date\"       \"character\"  \"proportion\" #> [6] \"percentage\" \"logical\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a codelist object. — exportCodelist","title":"Export a codelist object. — exportCodelist","text":"Export codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a codelist object. — exportCodelist","text":"","code":"exportCodelist(x, path, type = \"json\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a codelist object. — exportCodelist","text":"x codelist path Path files created. type Type files export. Currently 'json' 'csv' supported.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a codelist object. — exportCodelist","text":"Files codelists","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a concept set expression. — exportConceptSetExpression","title":"Export a concept set expression. — exportConceptSetExpression","text":"Export concept set expression.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a concept set expression. — exportConceptSetExpression","text":"","code":"exportConceptSetExpression(x, path, type = \"json\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a concept set expression. — exportConceptSetExpression","text":"x concept set expression path Path files created. type Type files export. Currently 'json' 'csv' supported.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a concept set expression. — exportConceptSetExpression","text":"Files concept set expressions","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a summarised_result object to a csv file. — exportSummarisedResult","title":"Export a summarised_result object to a csv file. — exportSummarisedResult","text":"Export summarised_result object csv file.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a summarised_result object to a csv file. — exportSummarisedResult","text":"","code":"exportSummarisedResult(   ...,   minCellCount = 5,   fileName = \"results_{cdm_name}_{date}.csv\",   path = getwd(),   logFile = getOption(\"omopgenerics.logFile\") )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/exportSummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a summarised_result object to a csv file. — exportSummarisedResult","text":"... set summarised_result objects. minCellCount Minimum count suppression purposes. fileName Name file created. Use {cdm_name} refer cdmName objects {date} add export date. path Path create csv file. ignored fileName full name path included. logFile Path log file export.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"Filter additional_name-additional_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"","code":"filterAdditional(result, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"result <summarised_result> object. ... Expressions return logical value (additionalColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"<summarised_result> object rows fulfill required specified additional.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = c(\"cohort1\", \"cohort2\", \"cohort3\"),   \"strata_name\" = \"sex\",   \"strata_level\" = \"Female\",   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = c(\"year\", \"time_step\", \"year &&& time_step\"),   \"additional_level\" = c(\"2010\", \"4\", \"2015 &&& 5\") ) |>   newSummarisedResult() #> `result_type`, `package_name`, and `package_version` added to settings.  x |>   filterAdditional(year == \"2010\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 eunomia  cohort_name cohort1     sex         Female       #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the group_name-group_level pair in a summarised_result — filterGroup","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"Filter group_name-group_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"","code":"filterGroup(result, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"result <summarised_result> object. ... Expressions return logical value (groupColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"<summarised_result> object rows fulfill required specified group.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = c(\"cohort_name\", \"age_group &&& cohort_name\", \"age_group\"),   \"group_level\" = c(\"my_cohort\", \">40 &&& second_cohort\", \"<40\"),   \"strata_name\" = \"sex\",   \"strata_level\" = \"Female\",   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> `result_type`, `package_name`, and `package_version` added to settings.  x |>   filterGroup(cohort_name == \"second_cohort\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name             group_level strata_name strata_level #>       <int> <chr>    <chr>                  <chr>       <chr>       <chr>        #> 1         1 eunomia  age_group &&& cohort_… >40 &&& se… sex         Female       #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a <summarised_result> using the settings — filterSettings","title":"Filter a <summarised_result> using the settings — filterSettings","text":"Filter <summarised_result> using settings","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a <summarised_result> using the settings — filterSettings","text":"","code":"filterSettings(result, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a <summarised_result> using the settings — filterSettings","text":"result <summarised_result> object. ... Expressions return logical value (columns settings used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a <summarised_result> using the settings — filterSettings","text":"<summarised_result> object result_id rows fulfill required specified settings.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a <summarised_result> using the settings — filterSettings","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = as.integer(c(1, 2)),   \"cdm_name\" = c(\"cprd\", \"eunomia\"),   \"group_name\" = \"cohort_name\",   \"group_level\" = \"my_cohort\",   \"strata_name\" = \"sex\",   \"strata_level\" = \"male\",   \"variable_name\" = \"Age group\",   \"variable_level\" = \"10 to 50\",   \"estimate_name\" = \"count\",   \"estimate_type\" = \"numeric\",   \"estimate_value\" = \"5\",   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult(settings = tibble(     \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")   )) #> `result_type`, `package_name`, and `package_version` added to settings.  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 cprd     cohort_name my_cohort   sex         male         #> 2         2 eunomia  cohort_name my_cohort   sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  x |> filterSettings(custom == \"A\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 cprd     cohort_name my_cohort   sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"Filter strata_name-strata_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"","code":"filterStrata(result, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"result <summarised_result> object. ... Expressions return logical value (strataColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"<summarised_result> object rows fulfill required specified strata.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/filterStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = \"my_cohort\",   \"strata_name\" = c(\"sex\", \"sex &&& age_group\", \"sex &&& year\"),   \"strata_level\" = c(\"Female\", \"Male &&& <40\", \"Female &&& 2010\"),   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> `result_type`, `package_name`, and `package_version` added to settings.  x |>   filterStrata(sex == \"Female\") #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level strata_name  strata_level    #>       <int> <chr>    <chr>       <chr>       <chr>        <chr>           #> 1         1 eunomia  cohort_name my_cohort   sex          Female          #> 2         1 eunomia  cohort_name my_cohort   sex &&& year Female &&& 2010 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cohort definition id of a certain name — getCohortId","title":"Get the cohort definition id of a certain name — getCohortId","text":"Get cohort definition id certain name","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cohort definition id of a certain name — getCohortId","text":"","code":"getCohortId(cohort, cohortName = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cohort definition id of a certain name — getCohortId","text":"cohort cohort_table object. cohortName Names cohort interest. NULL cohort names shown.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cohort definition id of a certain name — getCohortId","text":"Cohort definition ids","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cohort name of a certain cohort definition id — getCohortName","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"Get cohort name certain cohort definition id","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"","code":"getCohortName(cohort, cohortId = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"cohort cohort_table object. cohortId Cohort definition id interest. NULL cohort ids shown.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getCohortName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"Cohort names","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getPersonIdentifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"Get column name person identifier table (either subject_id person_id), throw error contains neither.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getPersonIdentifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"","code":"getPersonIdentifier(x, call = parent.frame())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getPersonIdentifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"x table. call call argument passed cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/getPersonIdentifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"Person identifier column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/groupColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in group_name column — groupColumns","title":"Identify variables in group_name column — groupColumns","text":"Identifies returns unique values group_name column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/groupColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in group_name column — groupColumns","text":"","code":"groupColumns(result)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/groupColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in group_name column — groupColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/groupColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in group_name column — groupColumns","text":"Unique values group name column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/groupColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in group_name column — groupColumns","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> groupColumns() } #> `result_type`, `package_name`, and `package_version` added to settings. #> [1] \"cohort\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a codelist. — importCodelist","title":"Import a codelist. — importCodelist","text":"Import codelist.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a codelist. — importCodelist","text":"","code":"importCodelist(path, type = \"json\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a codelist. — importCodelist","text":"path Path files created. type Type files export. Currently 'json' 'csv' supported.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a codelist. — importCodelist","text":"codelist","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importConceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a concept set expression. — importConceptSetExpression","title":"Import a concept set expression. — importConceptSetExpression","text":"Import concept set expression.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importConceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a concept set expression. — importConceptSetExpression","text":"","code":"importConceptSetExpression(path, type = \"json\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importConceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a concept set expression. — importConceptSetExpression","text":"path Path files created. type Type files export. Currently 'json' 'csv' supported.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importConceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a concept set expression. — importConceptSetExpression","text":"concept set expression","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a set of summarised results. — importSummarisedResult","title":"Import a set of summarised results. — importSummarisedResult","text":"Import set summarised results.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a set of summarised results. — importSummarisedResult","text":"","code":"importSummarisedResult(path, recursive = FALSE, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importSummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a set of summarised results. — importSummarisedResult","text":"path Path directory CSV files containing summarised results specific CSV file summarised result. recursive TRUE path directory, search files recurse directories ... Passed readr::read_csv.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/importSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a set of summarised results. — importSummarisedResult","text":"summarised result","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertCdmTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a cdm_reference object to a different source. — insertCdmTo","title":"Insert a cdm_reference object to a different source. — insertCdmTo","text":"Insert cdm_reference object different source.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertCdmTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a cdm_reference object to a different source. — insertCdmTo","text":"","code":"insertCdmTo(cdm, to)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertCdmTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a cdm_reference object to a different source. — insertCdmTo","text":"cdm cdm_reference, local collected memory. cdm_source another cdm_reference, valid cdm_source.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertCdmTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a cdm_reference object to a different source. — insertCdmTo","text":"first cdm_reference object inserted source.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertFromSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a table that is not a cdm_table but have the same original source to a cdm_table. This Table is not meant to be used to insert tables in the cdm, please use insertTable instead. — insertFromSource","text":"","code":"insertFromSource(cdm, value)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertFromSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a table that is not a cdm_table but have the same original source to a cdm_table. This Table is not meant to be used to insert tables in the cdm, please use insertTable instead. — insertFromSource","text":"cdm cdm_reference object. value table shares source cdm_reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertFromSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a table that is not a cdm_table but have the same original source to a cdm_table. This Table is not meant to be used to insert tables in the cdm, please use insertTable instead. — insertFromSource","text":"table cdm_reference environment","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a table to a cdm object. — insertTable","title":"Insert a table to a cdm object. — insertTable","text":"Insert table cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a table to a cdm object. — insertTable","text":"","code":"insertTable(cdm, name, table, overwrite = TRUE, temporary = FALSE)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a table to a cdm object. — insertTable","text":"cdm cdm reference source cdm reference. name Name table insert. table Table insert cdm. overwrite Whether overwrite existent table. temporary Whether create temporary table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/insertTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a table to a cdm object. — insertTable","text":"cdm reference. library(omopgenerics) library(dplyr, warn.conflicts = FALSE) person <- tibble( person_id = 1, gender_concept_id = 0, year_of_birth = 1990, race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble( observation_period_id = 1, person_id = 1, observation_period_start_date = .Date(\"2000-01-01\"), observation_period_end_date = .Date(\"2023-12-31\"), period_type_concept_id = 0 ) cdm <- cdmFromTables( tables = list(\"person\" = person, \"observation_period\" = observation_period), cdmName = \"my_example_cdm\" ) x <- tibble(= 1) cdm <- insertTable(cdm = cdm, name = \"new_table\", table = x) cdm$new_table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isResultSuppressed.html","id":null,"dir":"Reference","previous_headings":"","what":"To check whether an object is already suppressed to a certain min cell count. — isResultSuppressed","title":"To check whether an object is already suppressed to a certain min cell count. — isResultSuppressed","text":"check whether object already suppressed certain min cell count.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isResultSuppressed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To check whether an object is already suppressed to a certain min cell count. — isResultSuppressed","text":"","code":"isResultSuppressed(result, minCellCount = 5)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isResultSuppressed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To check whether an object is already suppressed to a certain min cell count. — isResultSuppressed","text":"result suppressed result check minCellCount Minimum count records used suppressing","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isResultSuppressed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To check whether an object is already suppressed to a certain min cell count. — isResultSuppressed","text":"Warning message check result","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isResultSuppressed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To check whether an object is already suppressed to a certain min cell count. — isResultSuppressed","text":"","code":"x <- dplyr::tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = \"my_cohort\",   \"strata_name\" = c(\"sex\", \"sex &&& age_group\", \"sex &&& year\"),   \"strata_level\" = c(\"Female\", \"Male &&& <40\", \"Female &&& 2010\"),   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> `result_type`, `package_name`, and `package_version` added to settings.  isResultSuppressed(x) #> Warning: ✖ 1 (3 rows) not suppressed. #> [1] FALSE"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isTableEmpty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a table is empty or not — isTableEmpty","title":"Check if a table is empty or not — isTableEmpty","text":"Check table empty ","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isTableEmpty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a table is empty or not — isTableEmpty","text":"","code":"isTableEmpty(table)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isTableEmpty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a table is empty or not — isTableEmpty","text":"table table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/isTableEmpty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a table is empty or not — isTableEmpty","text":"Boolean indicate cdm_table empty (TRUE FALSE).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/listSourceTables.html","id":null,"dir":"Reference","previous_headings":"","what":"List tables that can be accessed though a cdm object. — listSourceTables","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"List tables can accessed though cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/listSourceTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"","code":"listSourceTables(cdm)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/listSourceTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"cdm cdm reference source cdm reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/listSourceTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"character vector names tables.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/logMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"Log a message to a logFile — logMessage","title":"Log a message to a logFile — logMessage","text":"message written logFile displayed console, logFile exist message displayed console.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/logMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log a message to a logFile — logMessage","text":"","code":"logMessage(   message = \"Start logging file\",   logFile = getOption(\"omopgenerics.logFile\") )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/logMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log a message to a logFile — logMessage","text":"message Message log. logFile File path write logging messages. Create logFile createLogFile().","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/logMessage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log a message to a logFile — logMessage","text":"Invisible TRUE logging message written log file.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/logMessage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log a message to a logFile — logMessage","text":"","code":"library(dplyr)  logFile <- tempfile(pattern = \"log_{date}_{time}\", fileext = \".txt\") createLogFile(logFile = logFile) #> ! Overwriting current log file #> ℹ Creating log file: /tmp/RtmpYgzGMz/log_2025_05_21_17_38_541d9e6cc3aa48.txt. #> [2025-05-21 17:38:54] - Log file created  logMessage(\"Starting analysis\") #> [2025-05-21 17:38:54] - Starting analysis 1 + 1 #> [1] 2 logMessage(\"Analysis finished\") #> [2025-05-21 17:38:54] - Analysis finished  res <- summariseLogFile() #> [2025-05-21 17:38:54] - Exporting log file  glimpse(res) #> Rows: 4 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1 #> $ cdm_name         <chr> \"unknown\", \"unknown\", \"unknown\", \"unknown\" #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ strata_name      <chr> \"log_id\", \"log_id\", \"log_id\", \"log_id\" #> $ strata_level     <chr> \"1\", \"2\", \"3\", \"4\" #> $ variable_name    <chr> \"Log file created\", \"Starting analysis\", \"Analysis fi… #> $ variable_level   <chr> NA, NA, NA, NA #> $ estimate_name    <chr> \"date_time\", \"date_time\", \"date_time\", \"date_time\" #> $ estimate_type    <chr> \"character\", \"character\", \"character\", \"character\" #> $ estimate_value   <chr> \"2025-05-21 17:38:54\", \"2025-05-21 17:38:54\", \"2025-0… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\"  tidy(res) #> # A tibble: 4 × 5 #>   cdm_name log_id variable_name      variable_level date_time           #>   <chr>    <chr>  <chr>              <chr>          <chr>               #> 1 unknown  1      Log file created   NA             2025-05-21 17:38:54 #> 2 unknown  2      Starting analysis  NA             2025-05-21 17:38:54 #> 3 unknown  3      Analysis finished  NA             2025-05-21 17:38:54 #> 4 unknown  4      Exporting log file NA             2025-05-21 17:38:54"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newAchillesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an achilles table from a cdm_table. — newAchillesTable","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"Create achilles table cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newAchillesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"","code":"newAchillesTable(table, version = \"5.3\", cast = FALSE)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newAchillesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"table cdm_table. version version cdm. cast Whether cast columns correct type.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newAchillesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"achilles_table object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmReference.html","id":null,"dir":"Reference","previous_headings":"","what":"cdm_reference objects constructor — newCdmReference","title":"cdm_reference objects constructor — newCdmReference","text":"cdm_reference objects constructor","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cdm_reference objects constructor — newCdmReference","text":"","code":"newCdmReference(tables, cdmName, cdmVersion = NULL, .softValidation = FALSE)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cdm_reference objects constructor — newCdmReference","text":"tables List tables part OMOP Common Data Model reference. cdmName Name cdm object. cdmVersion Version cdm. Supported versions 5.3 5.4. .softValidation Whether perform soft validation consistency. set FALSE, non overlapping observation periods ensured.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmReference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cdm_reference objects constructor — newCdmReference","text":"cdm_reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmReference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cdm_reference objects constructor — newCdmReference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdmTables <- list(   \"person\" = tibble(     person_id = 1, gender_concept_id = 0, year_of_birth = 1990,     race_concept_id = 0, ethnicity_concept_id = 0   ) |>     newCdmTable(newLocalSource(), \"person\"),   \"observation_period\" = tibble(     observation_period_id = 1, person_id = 1,     observation_period_start_date = as.Date(\"2000-01-01\"),     observation_period_end_date = as.Date(\"2023-12-31\"),     period_type_concept_id = 0   ) |>     newCdmTable(newLocalSource(), \"observation_period\") ) cdm <- newCdmReference(tables = cdmTables, cdmName = \"mock\")  cdm #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cdm source object. — newCdmSource","title":"Create a cdm source object. — newCdmSource","text":"Create cdm source object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cdm source object. — newCdmSource","text":"","code":"newCdmSource(src, sourceType)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cdm source object. — newCdmSource","text":"src Source cdm object. sourceType Type source object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cdm source object. — newCdmSource","text":"validated cdm source object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an cdm table. — newCdmTable","title":"Create an cdm table. — newCdmTable","text":"Create cdm table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an cdm table. — newCdmTable","text":"","code":"newCdmTable(table, src, name)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an cdm table. — newCdmTable","text":"table table part cdm. src source table. name name table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCdmTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an cdm table. — newCdmTable","text":"cdm_table object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"'codelist' object constructor — newCodelist","title":"'codelist' object constructor — newCodelist","text":"'codelist' object constructor","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'codelist' object constructor — newCodelist","text":"","code":"newCodelist(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'codelist' object constructor — newCodelist","text":"x named list element contains vector concept IDs.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'codelist' object constructor — newCodelist","text":"codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":null,"dir":"Reference","previous_headings":"","what":"'codelist' object constructor — newCodelistWithDetails","title":"'codelist' object constructor — newCodelistWithDetails","text":"'codelist' object constructor","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'codelist' object constructor — newCodelistWithDetails","text":"","code":"newCodelistWithDetails(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'codelist' object constructor — newCodelistWithDetails","text":"x named list element contains tibble column concept_id","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'codelist' object constructor — newCodelistWithDetails","text":"codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCohortTable.html","id":null,"dir":"Reference","previous_headings":"","what":"cohort_table objects constructor. — newCohortTable","title":"cohort_table objects constructor. — newCohortTable","text":"cohort_table objects constructor.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCohortTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cohort_table objects constructor. — newCohortTable","text":"","code":"newCohortTable(   table,   cohortSetRef = attr(table, \"cohort_set\"),   cohortAttritionRef = attr(table, \"cohort_attrition\"),   cohortCodelistRef = attr(table, \"cohort_codelist\"),   .softValidation = FALSE )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCohortTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cohort_table objects constructor. — newCohortTable","text":"table cdm_table object least: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date. cohortSetRef Table least: cohort_definition_id, cohort_name cohortAttritionRef Table least: cohort_definition_id, number_subjects, number_records, reason_id, reason, excluded_subjects, excluded_records. cohortCodelistRef Table least: cohort_definition_id, codelist_name, concept_id codelist_type. .softValidation Whether perform soft validation consistency. set FALSE four additional checks performed: 1) check cohort end date cohort start date,  2) check missing values required columns, 3) check cohort duration within observation period, 4) overlapping cohort entries","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCohortTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cohort_table objects constructor. — newCohortTable","text":"cohort_table object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newCohortTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cohort_table objects constructor. — newCohortTable","text":"","code":"person <- dplyr::tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort1 <- dplyr::tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <- cdmFromTables(   tables = list(     \"person\" = person,     \"observation_period\" = observation_period,     \"cohort1\" = cohort1   ),   cdmName = \"test\" ) cdm #>  #> ── # OMOP CDM reference (local) of test ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: cohort1 cdm$cohort1 <- newCohortTable(table = cdm$cohort1) cdm #>  #> ── # OMOP CDM reference (local) of test ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: cohort1 #> • achilles tables: - #> • other tables: - settings(cdm$cohort1) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1    attrition(cdm$cohort1) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$cohort1) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newConceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"'conceptSetExpression' object constructor — newConceptSetExpression","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"'conceptSetExpression' object constructor","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newConceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"","code":"newConceptSetExpression(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newConceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"x named list tibbles, containing concept set definitions","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newConceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"conceptSetExpression","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newLocalSource.html","id":null,"dir":"Reference","previous_headings":"","what":"A new local source for the cdm — newLocalSource","title":"A new local source for the cdm — newLocalSource","text":"new local source cdm","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newLocalSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A new local source for the cdm — newLocalSource","text":"","code":"newLocalSource()"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newLocalSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A new local source for the cdm — newLocalSource","text":"list format cdm source","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newLocalSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A new local source for the cdm — newLocalSource","text":"","code":"# \\donttest{ library(omopgenerics) newLocalSource() #> This is a local cdm source # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an omop table from a cdm table. — newOmopTable","title":"Create an omop table from a cdm table. — newOmopTable","text":"Create omop table cdm table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an omop table from a cdm table. — newOmopTable","text":"","code":"newOmopTable(table, version = \"5.3\", cast = FALSE)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an omop table from a cdm table. — newOmopTable","text":"table cdm_table. version version cdm. cast Whether cast columns correct type.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an omop table from a cdm table. — newOmopTable","text":"omop_table object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"'summarised_results' object constructor — newSummarisedResult","title":"'summarised_results' object constructor — newSummarisedResult","text":"'summarised_results' object constructor","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'summarised_results' object constructor — newSummarisedResult","text":"","code":"newSummarisedResult(x, settings = attr(x, \"settings\"))"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newSummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'summarised_results' object constructor — newSummarisedResult","text":"x Table. settings Settings summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'summarised_results' object constructor — newSummarisedResult","text":"summarised_result object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/newSummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'summarised_results' object constructor — newSummarisedResult","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"cprd\",   \"group_name\" = \"cohort_name\",   \"group_level\" = \"acetaminophen\",   \"strata_name\" = \"sex &&& age_group\",   \"strata_level\" = c(\"male &&& <40\", \"male &&& >=40\"),   \"variable_name\" = \"number_subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"5\", \"15\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> `result_type`, `package_name`, and `package_version` added to settings.  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level   strata_name       strata_level  #>       <int> <chr>    <chr>       <chr>         <chr>             <chr>         #> 1         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& <40  #> 2         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& >=40 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> settings(x) #> # A tibble: 1 × 8 #>   result_id result_type package_name package_version group     strata additional #>       <int> <chr>       <chr>        <chr>           <chr>     <chr>  <chr>      #> 1         1 \"\"          \"\"           \"\"              cohort_n… sex &… \"\"         #> # ℹ 1 more variable: min_cell_count <chr> summary(x) #> A summarised_result object with 2 rows, 1 different result_id, 1 different cdm #> names, and 7 settings. #> CDM names: cprd. #> Settings: result_type, package_name, package_version, group, strata, #> additional, and min_cell_count.  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"cprd\",   \"group_name\" = \"cohort_name\",   \"group_level\" = \"acetaminophen\",   \"strata_name\" = \"sex &&& age_group\",   \"strata_level\" = c(\"male &&& <40\", \"male &&& >=40\"),   \"variable_name\" = \"number_subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"5\", \"15\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult(settings = tibble(     result_id = 1L, result_type = \"custom_summary\", mock = TRUE, value = 5   )) #> `package_name` and `package_version` added to settings. #> `mock` and `value` casted to character.  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level   strata_name       strata_level  #>       <int> <chr>    <chr>       <chr>         <chr>             <chr>         #> 1         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& <40  #> 2         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& >=40 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> settings(x) #> # A tibble: 1 × 10 #>   result_id result_type    package_name package_version group  strata additional #>       <int> <chr>          <chr>        <chr>           <chr>  <chr>  <chr>      #> 1         1 custom_summary \"\"           \"\"              cohor… sex &… \"\"         #> # ℹ 3 more variables: min_cell_count <chr>, mock <chr>, value <chr> summary(x) #> A summarised_result object with 2 rows, 1 different result_id, 1 different cdm #> names, and 9 settings. #> CDM names: cprd. #> Settings: result_type, package_name, package_version, group, strata, #> additional, min_cell_count, mock, and value."},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberRecords.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of records that a cdm_table has. — numberRecords","title":"Count the number of records that a cdm_table has. — numberRecords","text":"Count number records cdm_table .","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberRecords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of records that a cdm_table has. — numberRecords","text":"","code":"numberRecords(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberRecords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of records that a cdm_table has. — numberRecords","text":"x cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberRecords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of records that a cdm_table has. — numberRecords","text":"integer number records table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberRecords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of records that a cdm_table has. — numberRecords","text":"","code":"person <- dplyr::tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" )  numberRecords(cdm$observation_period) #> [1] 1"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberSubjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of subjects that a cdm_table has. — numberSubjects","title":"Count the number of subjects that a cdm_table has. — numberSubjects","text":"Count number subjects cdm_table .","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberSubjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of subjects that a cdm_table has. — numberSubjects","text":"","code":"numberSubjects(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberSubjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of subjects that a cdm_table has. — numberSubjects","text":"x cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberSubjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of subjects that a cdm_table has. — numberSubjects","text":"integer number subjects table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/numberSubjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of subjects that a cdm_table has. — numberSubjects","text":"","code":"person <- dplyr::tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" )  numberSubjects(cdm$observation_period) #> [1] 1"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"Required columns standard tables OMOP Common Data Model must .","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"","code":"omopColumns(   table,   field = NULL,   version = \"5.3\",   onlyRequired = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"table Table see required columns. field Name specific field. version Version OMOP Common Data Model. onlyRequired deprecated","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"Character vector column names","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"","code":"library(omopgenerics)  omopColumns(\"person\") #>  [1] \"person_id\"                   \"gender_concept_id\"           #>  [3] \"year_of_birth\"               \"month_of_birth\"              #>  [5] \"day_of_birth\"                \"birth_datetime\"              #>  [7] \"race_concept_id\"             \"ethnicity_concept_id\"        #>  [9] \"location_id\"                 \"provider_id\"                 #> [11] \"care_site_id\"                \"person_source_value\"         #> [13] \"gender_source_value\"         \"gender_source_concept_id\"    #> [15] \"race_source_value\"           \"race_source_concept_id\"      #> [17] \"ethnicity_source_value\"      \"ethnicity_source_concept_id\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTableFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a table of omop cdm fields informations — omopTableFields","title":"Return a table of omop cdm fields informations — omopTableFields","text":"Return table omop cdm fields informations","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTableFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a table of omop cdm fields informations — omopTableFields","text":"","code":"omopTableFields(cdmVersion = \"5.3\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTableFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a table of omop cdm fields informations — omopTableFields","text":"cdmVersion cdm version omop cdm.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTableFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a table of omop cdm fields informations — omopTableFields","text":"tibble contain informations different fields omop cdm.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"Standard tables cdm reference can contain OMOP Common Data Model.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"","code":"omopTables(version = \"5.3\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"Standard tables","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"","code":"library(omopgenerics)  omopTables() #>  [1] \"person\"                \"observation_period\"    \"visit_occurrence\"      #>  [4] \"visit_detail\"          \"condition_occurrence\"  \"drug_exposure\"         #>  [7] \"procedure_occurrence\"  \"device_exposure\"       \"measurement\"           #> [10] \"observation\"           \"death\"                 \"note\"                  #> [13] \"note_nlp\"              \"specimen\"              \"fact_relationship\"     #> [16] \"location\"              \"care_site\"             \"provider\"              #> [19] \"payer_plan_period\"     \"cost\"                  \"drug_era\"              #> [22] \"dose_era\"              \"condition_era\"         \"metadata\"              #> [25] \"cdm_source\"            \"concept\"               \"vocabulary\"            #> [28] \"domain\"                \"concept_class\"         \"concept_relationship\"  #> [31] \"relationship\"          \"concept_synonym\"       \"concept_ancestor\"      #> [34] \"source_to_concept_map\" \"drug_strength\"         \"cohort_definition\"     #> [37] \"attribute_definition\"  \"concept_recommended\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopgenerics-package.html","id":null,"dir":"Reference","previous_headings":"","what":"omopgenerics: Methods and Classes for the OMOP Common Data Model — omopgenerics-package","title":"omopgenerics: Methods and Classes for the OMOP Common Data Model — omopgenerics-package","text":"Provides definitions core classes methods used analytic pipelines query OMOP (Observational Medical Outcomes Partnership) common data model.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/omopgenerics/reference/omopgenerics-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omopgenerics: Methods and Classes for the OMOP Common Data Model — omopgenerics-package","text":"Maintainer: Martí Català marti.catalasabate@ndorms.ox.ac.uk (ORCID) Authors: Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) contributors: Mike Du mike.du@ndorms.ox.ac.uk (ORCID) [contributor] Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) [contributor] Adam Black black@ohdsi.org (ORCID) [contributor] Marta Alcalde-Herraiz marta.alcaldeherraiz@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/pivotEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set estimates as columns — pivotEstimates","title":"Set estimates as columns — pivotEstimates","text":"Pivot estimates new columns result table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/pivotEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set estimates as columns — pivotEstimates","text":"","code":"pivotEstimates(result, pivotEstimatesBy = \"estimate_name\", nameStyle = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/pivotEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set estimates as columns — pivotEstimates","text":"result <summarised_result>. pivotEstimatesBy Names pivot wider estimate values. NULL table pivotted. nameStyle Name style (glue package specifications) customise names pivotting estimates. NULL standard tidyr::pivot_wider formatting used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/pivotEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set estimates as columns — pivotEstimates","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/pivotEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set estimates as columns — pivotEstimates","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = 1L,     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult()    x |>     pivotEstimates() } #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 2 × 11 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 cprd     cohort_name my_cohort   sex         male         #> 2         1 eunomia  cohort_name my_cohort   sex         male         #> # ℹ 5 more variables: variable_name <chr>, variable_level <chr>, #> #   additional_name <chr>, additional_level <chr>, count <dbl>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a CDM reference object — print.cdm_reference","title":"Print a CDM reference object — print.cdm_reference","text":"Print CDM reference object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a CDM reference object — print.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' print(x, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a CDM reference object — print.cdm_reference","text":"x cdm_reference object ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a CDM reference object — print.cdm_reference","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a CDM reference object — print.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics)  cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  print(cdm) #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a codelist — print.codelist","title":"Print a codelist — print.codelist","text":"Print codelist","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a codelist — print.codelist","text":"","code":"# S3 method for class 'codelist' print(x, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a codelist — print.codelist","text":"x codelist ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a codelist — print.codelist","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a codelist — print.codelist","text":"","code":"codes <- list(\"disease X\" = c(1, 2, 3), \"disease Y\" = c(4, 5)) codes <- newCodelist(codes) #> Warning: ! `codelist` casted to integers. print(codes) #>  #> ── 2 codelists ───────────────────────────────────────────────────────────────── #>  #> - disease X (3 codes) #> - disease Y (2 codes)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist_with_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a codelist with details — print.codelist_with_details","title":"Print a codelist with details — print.codelist_with_details","text":"Print codelist details","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a codelist with details — print.codelist_with_details","text":"","code":"# S3 method for class 'codelist_with_details' print(x, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a codelist with details — print.codelist_with_details","text":"x codelist details ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a codelist with details — print.codelist_with_details","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a codelist with details — print.codelist_with_details","text":"","code":"codes <- list(\"disease X\" = dplyr::tibble(   concept_id = c(1, 2, 3),   other = c(\"a\", \"b\", \"c\") )) codes <- newCodelistWithDetails(codes) print(codes) #>  #> ── 1 codelist with details ───────────────────────────────────────────────────── #>  #> - disease X (3 codes)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a concept set expression — print.conceptSetExpression","title":"Print a concept set expression — print.conceptSetExpression","text":"Print concept set expression","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a concept set expression — print.conceptSetExpression","text":"","code":"# S3 method for class 'conceptSetExpression' print(x, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a concept set expression — print.conceptSetExpression","text":"x concept set expression ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a concept set expression — print.conceptSetExpression","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a concept set expression — print.conceptSetExpression","text":"","code":"asthma_cs <- list(   \"asthma_narrow\" = dplyr::tibble(     \"concept_id\" = 1,     \"excluded\" = FALSE,     \"descendants\" = TRUE,     \"mapped\" = FALSE   ),   \"asthma_broad\" = dplyr::tibble(     \"concept_id\" = c(1, 2),     \"excluded\" = FALSE,     \"descendants\" = TRUE,     \"mapped\" = FALSE   ) ) asthma_cs <- newConceptSetExpression(asthma_cs) print(asthma_cs) #>  #> ── 2 conceptSetExpressions ───────────────────────────────────────────────────── #>  #> - asthma_broad (2 concept criteria) #> - asthma_narrow (1 concept criteria)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/readSourceTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"Read table cdm_source add cdm.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/readSourceTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"","code":"readSourceTable(cdm, name)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/readSourceTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"cdm cdm reference. name Name table read cdm_source space.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/readSourceTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"cdm_reference new table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/recordCohortAttrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Update cohort attrition. — recordCohortAttrition","title":"Update cohort attrition. — recordCohortAttrition","text":"Update cohort attrition.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update cohort attrition. — recordCohortAttrition","text":"","code":"recordCohortAttrition(cohort, reason, cohortId = NULL)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update cohort attrition. — recordCohortAttrition","text":"cohort cohort_table object. reason character string. cohortId Cohort definition id cohort update attrition. NULL cohort_definition_id updated.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update cohort attrition. — recordCohortAttrition","text":"cohort_table updated attrition.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update cohort attrition. — recordCohortAttrition","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")),   cohort_end_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")), ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) )  cdm$cohort1 #> # A tibble: 4 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-01      #> 2                    1          1 2021-01-01        2021-01-01      #> 3                    1          1 2022-01-01        2022-01-01      #> 4                    2          1 2022-01-01        2022-01-01      attrition(cdm$cohort1) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              3               1         1 Initial qualify… #> 2                    2              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>  cdm$cohort1 <- cdm$cohort1 |>   group_by(cohort_definition_id, subject_id) |>   filter(cohort_start_date == min(cohort_start_date)) |>   ungroup() |>   compute(name = \"cohort1\", temporary = FALSE) |>   recordCohortAttrition(\"Restrict to first observation\")  cdm$cohort1 #> # A tibble: 2 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #> *                <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-01      #> 2                    2          1 2022-01-01        2022-01-01      attrition(cdm$cohort1) #> # A tibble: 4 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              3               1         1 Initial qualify… #> 2                    1              1               1         2 Restrict to fir… #> 3                    2              1               1         1 Initial qualify… #> 4                    2              1               1         2 Restrict to fir… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter generics tidy","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns that the result tables must have. — resultColumns","title":"Required columns that the result tables must have. — resultColumns","text":"Required columns result tables must .","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns that the result tables must have. — resultColumns","text":"","code":"resultColumns(table = \"summarised_result\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns that the result tables must have. — resultColumns","text":"table Table see required columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns that the result tables must have. — resultColumns","text":"Required columns","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns that the result tables must have. — resultColumns","text":"","code":"library(omopgenerics)  resultColumns() #>  [1] \"result_id\"        \"cdm_name\"         \"group_name\"       \"group_level\"      #>  [5] \"strata_name\"      \"strata_level\"     \"variable_name\"    \"variable_level\"   #>  [9] \"estimate_name\"    \"estimate_type\"    \"estimate_value\"   \"additional_name\"  #> [13] \"additional_level\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultPackageVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if different packages version are used for summarise_results object — resultPackageVersion","title":"Check if different packages version are used for summarise_results object — resultPackageVersion","text":"Check different packages version used summarise_results object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultPackageVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if different packages version are used for summarise_results object — resultPackageVersion","text":"","code":"resultPackageVersion(result)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultPackageVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if different packages version are used for summarise_results object — resultPackageVersion","text":"result summarised results object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/resultPackageVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if different packages version are used for summarise_results object — resultPackageVersion","text":"summarised results object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort settings from a cohort_table object. — settings.cohort_table","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"Get cohort settings cohort_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"","code":"# S3 method for class 'cohort_table' settings(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"x cohort_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"table details cohort settings.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = 1,   subject_id = 1,   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2012-01-01\") ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\",   cohortTables = list(\"my_cohort\" = cohort) )  settings(cdm$my_cohort) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1     cdm$my_cohort <- cdm$my_cohort |>   newCohortTable(cohortSetRef = tibble(     cohort_definition_id = 1, cohort_name = \"new_name\"   ))  settings(cdm$my_cohort) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <dbl> <chr>       #> 1                    1 new_name"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get settings from an object. — settings","title":"Get settings from an object. — settings","text":"Get settings object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get settings from an object. — settings","text":"","code":"settings(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get settings from an object. — settings","text":"x Object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get settings from an object. — settings","text":"table settings object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Get settings from a summarised_result object. — settings.summarised_result","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"Get settings summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"","code":"# S3 method for class 'summarised_result' settings(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"x summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"table settings.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settings.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = 1,   subject_id = 1,   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2012-01-01\") ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\",   cohortTables = list(\"my_cohort\" = cohort) )  result <- summary(cdm$my_cohort) #> `cohort_definition_id` casted to character. #> `cohort_definition_id` casted to character.  settings(result) #> # A tibble: 2 × 10 #>   result_id result_type     package_name package_version group strata additional #>       <int> <chr>           <chr>        <chr>           <chr> <chr>  <chr>      #> 1         1 cohort_count    omopgenerics 1.2.0           coho… \"\"     \"\"         #> 2         2 cohort_attriti… omopgenerics 1.2.0           coho… \"reas… \"reason_i… #> # ℹ 3 more variables: min_cell_count <chr>, cohort_definition_id <chr>, #> #   table_name <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settingsColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify settings columns of a <summarised_result> — settingsColumns","title":"Identify settings columns of a <summarised_result> — settingsColumns","text":"Identifies returns columns settings table obtained using settings() <summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settingsColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify settings columns of a <summarised_result> — settingsColumns","text":"","code":"settingsColumns(result, metadata = FALSE)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settingsColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify settings columns of a <summarised_result> — settingsColumns","text":"result <summarised_result>. metadata Whether include metadata columns settings .","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settingsColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify settings columns of a <summarised_result> — settingsColumns","text":"Vector names settings columns","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/settingsColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify settings columns of a <summarised_result> — settingsColumns","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> settingsColumns() } #> `result_type`, `package_name`, and `package_version` added to settings. #> [1] \"custom\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sourceType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the source type of an object. — sourceType","title":"Get the source type of an object. — sourceType","text":"Get source type object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sourceType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the source type of an object. — sourceType","text":"","code":"sourceType(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sourceType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the source type of an object. — sourceType","text":"x Object know source type.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sourceType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the source type of an object. — sourceType","text":"character vector defines type cdm_source.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Split additional_name and additional_level columns — splitAdditional","title":"Split additional_name and additional_level columns — splitAdditional","text":"Pivots input dataframe values column additional_name transformed columns contain values additional_level column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"splitAdditional(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split additional_name and additional_level columns — splitAdditional","text":"result dataframe least columns additional_name additional_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split additional_name and additional_level columns — splitAdditional","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> splitAdditional() } #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 2 × 11 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 cprd     cohort_name my_cohort   sex         male         #> 2         2 eunomia  cohort_name my_cohort   sex         male         #> # ℹ 5 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Split all pairs name-level into columns. — splitAll","title":"Split all pairs name-level into columns. — splitAll","text":"Pivots input dataframe pair name-level columns transformed columns (name) contain values corresponding level.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"splitAll(result, keep = FALSE, fill = \"overall\", exclude = \"variable\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split all pairs name-level into columns. — splitAll","text":"result data.frame. keep Whether keep original name-level columns. fill character specifies value filled missing. exclude Name column pair exclude.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split all pairs name-level into columns. — splitAll","text":"dataframe group, strata additional columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> splitAll() } #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 2 × 9 #>   result_id cdm_name cohort_name sex   variable_name variable_level #>       <int> <chr>    <chr>       <chr> <chr>         <chr>          #> 1         1 cprd     my_cohort   male  Age group     10 to 50       #> 2         2 eunomia  my_cohort   male  Age group     10 to 50       #> # ℹ 3 more variables: estimate_name <chr>, estimate_type <chr>, #> #   estimate_value <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Split group_name and group_level columns — splitGroup","title":"Split group_name and group_level columns — splitGroup","text":"Pivots input dataframe values column group_name transformed columns contain values group_level column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split group_name and group_level columns — splitGroup","text":"","code":"splitGroup(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split group_name and group_level columns — splitGroup","text":"result dataframe least columns group_name group_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split group_name and group_level columns — splitGroup","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split group_name and group_level columns — splitGroup","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> splitGroup() } #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 2 × 12 #>   result_id cdm_name cohort_name strata_name strata_level variable_name #>       <int> <chr>    <chr>       <chr>       <chr>        <chr>         #> 1         1 cprd     my_cohort   sex         male         Age group     #> 2         2 eunomia  my_cohort   sex         male         Age group     #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Split strata_name and strata_level columns — splitStrata","title":"Split strata_name and strata_level columns — splitStrata","text":"Pivots input dataframe values column strata_name transformed columns contain values strata_level column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"splitStrata(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split strata_name and strata_level columns — splitStrata","text":"result dataframe least columns strata_name strata_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split strata_name and strata_level columns — splitStrata","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/splitStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> splitStrata() } #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 2 × 12 #>   result_id cdm_name group_name  group_level sex   variable_name variable_level #>       <int> <chr>    <chr>       <chr>       <chr> <chr>         <chr>          #> 1         1 cprd     cohort_name my_cohort   male  Age group     10 to 50       #> 2         2 eunomia  cohort_name my_cohort   male  Age group     10 to 50       #> # ℹ 5 more variables: estimate_name <chr>, estimate_type <chr>, #> #   estimate_value <chr>, additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/strataColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in strata_name column — strataColumns","title":"Identify variables in strata_name column — strataColumns","text":"Identifies returns unique values strata_name column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/strataColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in strata_name column — strataColumns","text":"","code":"strataColumns(result)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/strataColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in strata_name column — strataColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/strataColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in strata_name column — strataColumns","text":"Unique values strata name column.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/strataColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in strata_name column — strataColumns","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> strataColumns() } #> `result_type`, `package_name`, and `package_version` added to settings. #> [1] \"sex\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm reference object. — [[.cdm_reference","title":"Subset a cdm reference object. — [[.cdm_reference","text":"Subset cdm reference object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm reference object. — [[.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' x[[name]]"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm reference object. — [[.cdm_reference","text":"x cdm reference name name index table extract cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm reference object. — [[.cdm_reference","text":"single cdm table reference","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cdm reference object. — [[.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  cdm[[\"person\"]] #> # A tibble: 3 × 5 #>   person_id gender_concept_id year_of_birth race_concept_id ethnicity_concept_id #> *     <dbl>             <dbl>         <dbl>           <dbl>                <dbl> #> 1         1                 0          1990               0                    0 #> 2         2                 0          1990               0                    0 #> 3         3                 0          1990               0                    0 # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a table to a cdm reference. — [[<-.cdm_reference","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"Assign table cdm reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' cdm[[name]] <- value"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"cdm cdm reference. name Name assign new table. value Table source cdm object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"cdm reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summariseLogFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise and extract the information of a log file into a summarised_result object. — summariseLogFile","title":"Summarise and extract the information of a log file into a summarised_result object. — summariseLogFile","text":"Summarise extract information log file summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summariseLogFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise and extract the information of a log file into a summarised_result object. — summariseLogFile","text":"","code":"summariseLogFile(   logFile = getOption(\"omopgenerics.logFile\"),   cdmName = \"unknown\" )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summariseLogFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise and extract the information of a log file into a summarised_result object. — summariseLogFile","text":"logFile File path log file summarise. Create logFile createLogFile(). cdmName Name cdm summarise_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summariseLogFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise and extract the information of a log file into a summarised_result object. — summariseLogFile","text":"summarise_result information log file.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summariseLogFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise and extract the information of a log file into a summarised_result object. — summariseLogFile","text":"","code":"library(dplyr)  logFile <- tempfile(pattern = \"log_{date}_{time}\", fileext = \".txt\") createLogFile(logFile = logFile) #> ! Overwriting current log file #> ℹ Creating log file: /tmp/RtmpYgzGMz/log_2025_05_21_17_39_041d9e1659b31.txt. #> [2025-05-21 17:39:04] - Log file created  logMessage(\"Starting analysis\") #> [2025-05-21 17:39:04] - Starting analysis 1 + 1 #> [1] 2 logMessage(\"Analysis finished\") #> [2025-05-21 17:39:04] - Analysis finished  res <- summariseLogFile() #> [2025-05-21 17:39:04] - Exporting log file  glimpse(res) #> Rows: 4 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1 #> $ cdm_name         <chr> \"unknown\", \"unknown\", \"unknown\", \"unknown\" #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ strata_name      <chr> \"log_id\", \"log_id\", \"log_id\", \"log_id\" #> $ strata_level     <chr> \"1\", \"2\", \"3\", \"4\" #> $ variable_name    <chr> \"Log file created\", \"Starting analysis\", \"Analysis fi… #> $ variable_level   <chr> NA, NA, NA, NA #> $ estimate_name    <chr> \"date_time\", \"date_time\", \"date_time\", \"date_time\" #> $ estimate_type    <chr> \"character\", \"character\", \"character\", \"character\" #> $ estimate_value   <chr> \"2025-05-21 17:39:04\", \"2025-05-21 17:39:04\", \"2025-0… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\"  tidy(res) #> # A tibble: 4 × 5 #>   cdm_name log_id variable_name      variable_level date_time           #>   <chr>    <chr>  <chr>              <chr>          <chr>               #> 1 unknown  1      Log file created   NA             2025-05-21 17:39:04 #> 2 unknown  2      Starting analysis  NA             2025-05-21 17:39:04 #> 3 unknown  3      Analysis finished  NA             2025-05-21 17:39:04 #> 4 unknown  4      Exporting log file NA             2025-05-21 17:39:04"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary a cdm reference — summary.cdm_reference","title":"Summary a cdm reference — summary.cdm_reference","text":"Summary cdm reference","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary a cdm reference — summary.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' summary(object, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary a cdm reference — summary.cdm_reference","text":"object cdm reference object. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary a cdm reference — summary.cdm_reference","text":"summarised_result object summary data contained cdm.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary a cdm reference — summary.cdm_reference","text":"","code":"library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" )  summary(cdm) #> # A tibble: 13 × 13 #>    result_id cdm_name group_name group_level strata_name strata_level #>        <int> <chr>    <chr>      <chr>       <chr>       <chr>        #>  1         1 test     overall    overall     overall     overall      #>  2         1 test     overall    overall     overall     overall      #>  3         1 test     overall    overall     overall     overall      #>  4         1 test     overall    overall     overall     overall      #>  5         1 test     overall    overall     overall     overall      #>  6         1 test     overall    overall     overall     overall      #>  7         1 test     overall    overall     overall     overall      #>  8         1 test     overall    overall     overall     overall      #>  9         1 test     overall    overall     overall     overall      #> 10         1 test     overall    overall     overall     overall      #> 11         1 test     overall    overall     overall     overall      #> 12         1 test     overall    overall     overall     overall      #> 13         1 test     overall    overall     overall     overall      #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary a generated cohort set — summary.cohort_table","title":"Summary a generated cohort set — summary.cohort_table","text":"Summary generated cohort set","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary a generated cohort set — summary.cohort_table","text":"","code":"# S3 method for class 'cohort_table' summary(object, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary a generated cohort set — summary.cohort_table","text":"object generated cohort set object. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary a generated cohort set — summary.cohort_table","text":"summarised_result object summary cohort_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary a generated cohort set — summary.cohort_table","text":"","code":"library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\",   cohortTables = list(\"cohort1\" = tibble(     cohort_definition_id = 1,     subject_id = 1,     cohort_start_date = as.Date(\"2010-01-01\"),     cohort_end_date = as.Date(\"2010-01-05\")   )) )  summary(cdm$cohort1) #> `cohort_definition_id` casted to character. #> `cohort_definition_id` casted to character. #> # A tibble: 6 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level            #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>                   #> 1         1 test     cohort_name cohort_1    overall     overall                 #> 2         1 test     cohort_name cohort_1    overall     overall                 #> 3         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> 4         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> 5         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> 6         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary a summarised_result — summary.summarised_result","title":"Summary a summarised_result — summary.summarised_result","text":"Summary summarised_result","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary a summarised_result — summary.summarised_result","text":"","code":"# S3 method for class 'summarised_result' summary(object, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary a summarised_result — summary.summarised_result","text":"object summarised_result object. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary a summarised_result — summary.summarised_result","text":"summary result_types contained summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/summary.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary a summarised_result — summary.summarised_result","text":"","code":"library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" )  result <- summary(cdm)  summary(result) #> A summarised_result object with 13 rows, 1 different result_id, 1 different cdm #> names, and 7 settings. #> CDM names: test. #> Settings: result_type, package_name, package_version, group, strata, #> additional, and min_cell_count."},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to suppress counts in result objects — suppress","title":"Function to suppress counts in result objects — suppress","text":"Function suppress counts result objects","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to suppress counts in result objects — suppress","text":"","code":"suppress(result, minCellCount = 5)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to suppress counts in result objects — suppress","text":"result Result object minCellCount Minimum count records report results.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to suppress counts in result objects — suppress","text":"Table suppressed counts","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to suppress counts in result objects — suppress.summarised_result","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"Function suppress counts result objects","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"","code":"# S3 method for class 'summarised_result' suppress(result, minCellCount = 5)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"result summarised_result object. minCellCount Minimum count records report results.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"summarised_result suppressed counts.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(omopgenerics)  my_result <- tibble(   \"result_id\" = \"1\",   \"cdm_name\" = \"mock\",   \"result_type\" = \"summarised_characteristics\",   \"package_name\" = \"omopgenerics\",   \"package_version\" = as.character(utils::packageVersion(\"omopgenerics\")),   \"group_name\" = \"overall\",   \"group_level\" = \"overall\",   \"strata_name\" = c(rep(\"overall\", 6), rep(\"sex\", 3)),   \"strata_level\" = c(rep(\"overall\", 6), \"male\", \"female\", \"female\"),   \"variable_name\" = c(     \"number records\", \"age_group\", \"age_group\",     \"age_group\", \"age_group\", \"my_variable\", \"number records\", \"age_group\",     \"age_group\"   ),   \"variable_level\" = c(     NA, \"<50\", \"<50\", \">=50\", \">=50\", NA, NA,     \"<50\", \"<50\"   ),   \"estimate_name\" = c(     \"count\", \"count\", \"percentage\", \"count\", \"percentage\",     \"random\", \"count\", \"count\", \"percentage\"   ),   \"estimate_type\" = c(     \"integer\", \"integer\", \"percentage\", \"integer\",     \"percentage\", \"numeric\", \"integer\", \"integer\", \"percentage\"   ),   \"estimate_value\" = c(\"10\", \"5\", \"50\", \"3\", \"30\", \"1\", \"3\", \"12\", \"6\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) my_result <- newSummarisedResult(my_result) #> ! `result_type`, `package_name`, and `package_version` moved to settings. This #>   is not recommended as settings should be explicitly provided. #> ℹ NOTE that this can cause problems with settings. my_result |> glimpse() #> Rows: 9 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"number records\", \"age_group\", \"age_group\", \"age_grou… #> $ variable_level   <chr> NA, \"<50\", \"<50\", \">=50\", \">=50\", NA, NA, \"<50\", \"<50\" #> $ estimate_name    <chr> \"count\", \"count\", \"percentage\", \"count\", \"percentage\"… #> $ estimate_type    <chr> \"integer\", \"integer\", \"percentage\", \"integer\", \"perce… #> $ estimate_value   <chr> \"10\", \"5\", \"50\", \"3\", \"30\", \"1\", \"3\", \"12\", \"6\" #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… my_result <- suppress(my_result, minCellCount = 5) my_result |> glimpse() #> Rows: 9 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"number records\", \"age_group\", \"age_group\", \"age_grou… #> $ variable_level   <chr> NA, \"<50\", \"<50\", \">=50\", \">=50\", NA, NA, \"<50\", \"<50\" #> $ estimate_name    <chr> \"count\", \"count\", \"percentage\", \"count\", \"percentage\"… #> $ estimate_type    <chr> \"integer\", \"integer\", \"percentage\", \"integer\", \"perce… #> $ estimate_value   <chr> \"10\", \"5\", \"50\", \"-\", \"-\", \"1\", \"-\", \"12\", \"6\" #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the table name of a cdm_table. — tableName","title":"Get the table name of a cdm_table. — tableName","text":"Get table name cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the table name of a cdm_table. — tableName","text":"","code":"tableName(table)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the table name of a cdm_table. — tableName","text":"table cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the table name of a cdm_table. — tableName","text":"character name.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the table name of a cdm_table. — tableName","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  tableName(cdm$person) #> [1] \"person\" # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the table source of a cdm_table. — tableSource","title":"Get the table source of a cdm_table. — tableSource","text":"Get table source cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the table source of a cdm_table. — tableSource","text":"","code":"tableSource(table)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the table source of a cdm_table. — tableSource","text":"table cdm_table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the table source of a cdm_table. — tableSource","text":"cdm_source object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tableSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the table source of a cdm_table. — tableSource","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  tableSource(cdm$person) #> This is a local cdm source # }"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidy.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a <summarised_result> object into a tidy tibble — tidy.summarised_result","title":"Turn a <summarised_result> object into a tidy tibble — tidy.summarised_result","text":"Provides tools obtaining tidy version <summarised_result> object. tidy version include settings columns, estimate_value pivotted columns using estimate_name names, group, strata, additional splitted.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidy.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a <summarised_result> object into a tidy tibble — tidy.summarised_result","text":"","code":"# S3 method for class 'summarised_result' tidy(x, ...)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidy.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a <summarised_result> object into a tidy tibble — tidy.summarised_result","text":"x <summarised_result>. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidy.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a <summarised_result> object into a tidy tibble — tidy.summarised_result","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidy.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a <summarised_result> object into a tidy tibble — tidy.summarised_result","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> tidy() } #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 2 × 7 #>   cdm_name cohort_name sex   variable_name variable_level count custom #>   <chr>    <chr>       <chr> <chr>         <chr>          <dbl> <chr>  #> 1 cprd     my_cohort   male  Age group     10 to 50           5 A      #> 2 eunomia  my_cohort   male  Age group     10 to 50           5 B"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidyColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify tidy columns of a <summarised_result> — tidyColumns","title":"Identify tidy columns of a <summarised_result> — tidyColumns","text":"Identifies returns columns tidy version <summarised_result> .","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidyColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify tidy columns of a <summarised_result> — tidyColumns","text":"","code":"tidyColumns(result)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidyColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify tidy columns of a <summarised_result> — tidyColumns","text":"result <summarised_result>.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidyColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify tidy columns of a <summarised_result> — tidyColumns","text":"Table columns applying tidy() function <summarised_result>.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tidyColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify tidy columns of a <summarised_result> — tidyColumns","text":"","code":"{   library(dplyr)   library(omopgenerics)    x <- tibble(     \"result_id\" = as.integer(c(1, 2)),     \"cdm_name\" = c(\"cprd\", \"eunomia\"),     \"group_name\" = \"cohort_name\",     \"group_level\" = \"my_cohort\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) |>     newSummarisedResult(settings = tibble(       \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")     ))    x    x |> tidyColumns() } #> `result_type`, `package_name`, and `package_version` added to settings. #> [1] \"cdm_name\"       \"cohort_name\"    \"sex\"            \"variable_name\"  #> [5] \"variable_level\" \"count\"          \"custom\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tmpPrefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"Create temporary prefix tables, contains unique prefix starts tmp.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tmpPrefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"","code":"tmpPrefix()"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tmpPrefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"temporary prefix.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/tmpPrefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"","code":"library(omopgenerics) tmpPrefix() #> [1] \"tmp_002_\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/toSnakeCase.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a character vector to snake case — toSnakeCase","title":"Convert a character vector to snake case — toSnakeCase","text":"Convert character vector snake case","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/toSnakeCase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a character vector to snake case — toSnakeCase","text":"","code":"toSnakeCase(x)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/toSnakeCase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a character vector to snake case — toSnakeCase","text":"x Character vector convert","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/toSnakeCase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a character vector to snake case — toSnakeCase","text":"snake_case vector","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/toSnakeCase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a character vector to snake case — toSnakeCase","text":"","code":"toSnakeCase(\"myVariable\") #> [1] \"my_variable\"  toSnakeCase(c(\"cohort1\", \"Cohort22b\")) #> [1] \"cohort1\"   \"cohort22b\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/transformToSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a <summarised_result> object from a data.frame, given a set of specifications. — transformToSummarisedResult","title":"Create a <summarised_result> object from a data.frame, given a set of specifications. — transformToSummarisedResult","text":"Create <summarised_result> object data.frame, given set specifications.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/transformToSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a <summarised_result> object from a data.frame, given a set of specifications. — transformToSummarisedResult","text":"","code":"transformToSummarisedResult(   x,   group = character(),   strata = character(),   additional = character(),   estimates = character(),   settings = character() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/transformToSummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a <summarised_result> object from a data.frame, given a set of specifications. — transformToSummarisedResult","text":"x data.frame. group Columns x used group_name-group_level formatting. strata Columns x used strata_name-strata_level formatting. additional Columns x used additional_name-additional_level formatting. estimates Columns x formatted : estimate_name-estimate_type-estimate_value. settings Columns x thta form settings <summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/transformToSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a <summarised_result> object from a data.frame, given a set of specifications. — transformToSummarisedResult","text":"<summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/transformToSummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a <summarised_result> object from a data.frame, given a set of specifications. — transformToSummarisedResult","text":"","code":"x <- dplyr::tibble(   cohort_name = c(\"cohort1\", \"cohort2\"),   variable_name = \"age\",   mean = c(50, 45.3),   median = c(55L, 44L) )  transformToSummarisedResult(   x = x,   group = c(\"cohort_name\"),   estimates = c(\"mean\", \"median\") ) #> ℹ Column `cdm_name` created as 'unknown' as not present in x. #> ℹ Column `variable_level` created as 'overall' as not present in x. #> `result_type`, `package_name`, and `package_version` added to settings. #> # A tibble: 4 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 unknown  cohort_name cohort1     overall     overall      #> 2         1 unknown  cohort_name cohort1     overall     overall      #> 3         1 unknown  cohort_name cohort2     overall     overall      #> 4         1 unknown  cohort_name cohort2     overall     overall      #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"Get unique Identifier certain number characters prefix.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"","code":"uniqueId(n = 1, exclude = character(), nChar = 3, prefix = \"id_\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"n Number identifiers. exclude Columns exclude. nChar Number characters. prefix prefix identifiers.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"character vector n unique identifiers.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueTableName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unique table name — uniqueTableName","title":"Create a unique table name — uniqueTableName","text":"Create unique table name","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueTableName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unique table name — uniqueTableName","text":"","code":"uniqueTableName(prefix = \"\")"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueTableName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unique table name — uniqueTableName","text":"prefix Prefix table names.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueTableName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unique table name — uniqueTableName","text":"string can used dbplyr temp table name","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniqueTableName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a unique table name — uniqueTableName","text":"","code":"library(omopgenerics) uniqueTableName() #> [1] \"og_002_1747849149\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"Unites targeted table columns additional_name-additional_level columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"uniteAdditional(   x,   cols = character(0),   keep = FALSE,   ignore = c(NA, \"overall\") )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteAdditional(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value additional_name   additional_level #>   <chr>           <dbl> <chr>             <chr>            #> 1 number subjects    10 sex &&& age_group Male &&& <40     #> 2 number subjects    15 sex &&& age_group Female &&& >40   #> 3 number subjects    40 sex &&& age_group Male &&& >40     #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in group_name-group_level format — uniteGroup","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"Unites targeted table columns group_name-group_level columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"uniteGroup(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteGroup(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value group_name        group_level    #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in strata_name-strata_level format — uniteStrata","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"Unites targeted table columns strata_name-strata_level columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"uniteStrata(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/uniteStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteStrata(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value strata_name       strata_level   #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAchillesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if a cdm_table is a valid achilles table. — validateAchillesTable","title":"Validate if a cdm_table is a valid achilles table. — validateAchillesTable","text":"Validate cdm_table valid achilles table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAchillesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if a cdm_table is a valid achilles table. — validateAchillesTable","text":"","code":"validateAchillesTable(   table,   version = NULL,   cast = FALSE,   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAchillesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if a cdm_table is a valid achilles table. — validateAchillesTable","text":"table cdm_table validate. version cdm vocabulary version. cast Whether cast columns required type. call Passed cli call.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAchillesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if a cdm_table is a valid achilles table. — validateAchillesTable","text":"invisible achilles table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the ageGroup argument. It must be a list of two integerish numbers lower age and upper age, both of the must be greater or equal to 0 and lower age must be lower or equal to the upper age. If not named automatic names will be given in the output list. — validateAgeGroupArgument","title":"Validate the ageGroup argument. It must be a list of two integerish numbers lower age and upper age, both of the must be greater or equal to 0 and lower age must be lower or equal to the upper age. If not named automatic names will be given in the output list. — validateAgeGroupArgument","text":"Validate ageGroup argument. must list two integerish numbers lower age upper age, must greater equal 0 lower age must lower equal upper age. named automatic names given output list.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the ageGroup argument. It must be a list of two integerish numbers lower age and upper age, both of the must be greater or equal to 0 and lower age must be lower or equal to the upper age. If not named automatic names will be given in the output list. — validateAgeGroupArgument","text":"","code":"validateAgeGroupArgument(   ageGroup,   multipleAgeGroup = TRUE,   overlap = FALSE,   null = TRUE,   ageGroupName = \"age_group\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the ageGroup argument. It must be a list of two integerish numbers lower age and upper age, both of the must be greater or equal to 0 and lower age must be lower or equal to the upper age. If not named automatic names will be given in the output list. — validateAgeGroupArgument","text":"ageGroup age group list. multipleAgeGroup allow mutliple age group. overlap allow overlapping ageGroup. null null age group allowed true false. ageGroupName Name default age group. call parent frame.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the ageGroup argument. It must be a list of two integerish numbers lower age and upper age, both of the must be greater or equal to 0 and lower age must be lower or equal to the upper age. If not named automatic names will be given in the output list. — validateAgeGroupArgument","text":"validate ageGroup","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate the ageGroup argument. It must be a list of two integerish numbers lower age and upper age, both of the must be greater or equal to 0 and lower age must be lower or equal to the upper age. If not named automatic names will be given in the output list. — validateAgeGroupArgument","text":"","code":"validateAgeGroupArgument(list(c(0, 39), c(40, Inf))) #> $age_group #> $age_group$`0 to 39` #> [1]  0 39 #>  #> $age_group$`40 or above` #> [1]  40 Inf #>  #>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if an object in a valid cdm_reference. — validateCdmArgument","title":"Validate if an object in a valid cdm_reference. — validateCdmArgument","text":"Validate object valid cdm_reference.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if an object in a valid cdm_reference. — validateCdmArgument","text":"","code":"validateCdmArgument(   cdm,   checkOverlapObservation = FALSE,   checkStartBeforeEndObservation = FALSE,   checkPlausibleObservationDates = FALSE,   checkPerson = FALSE,   requiredTables = character(),   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if an object in a valid cdm_reference. — validateCdmArgument","text":"cdm cdm_reference object checkOverlapObservation TRUE perform check overlap observation period checkStartBeforeEndObservation TRUE perform check correct observational start end date checkPlausibleObservationDates TRUE perform check implausible observation period start dates (1800-01-01) end dates (current date) checkPerson TRUE perform check person id clinical table person table requiredTables Name tables required part cdm_reference object. validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if an object in a valid cdm_reference. — validateCdmArgument","text":"cdm_reference object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if an object in a valid cdm_reference. — validateCdmArgument","text":"","code":"cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" )  validateCdmArgument(cdm) #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: -"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if a table is a valid cdm_table object. — validateCdmTable","title":"Validate if a table is a valid cdm_table object. — validateCdmTable","text":"Validate table valid cdm_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if a table is a valid cdm_table object. — validateCdmTable","text":"","code":"validateCdmTable(table, name = NULL, call = parent.frame())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if a table is a valid cdm_table object. — validateCdmTable","text":"table Object validate. name want validate table specific name. call Call argument passed cli.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCdmTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if a table is a valid cdm_table object. — validateCdmTable","text":"table error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a cohort table input. — validateCohortArgument","title":"Validate a cohort table input. — validateCohortArgument","text":"Validate cohort table input.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a cohort table input. — validateCohortArgument","text":"","code":"validateCohortArgument(   cohort,   checkEndAfterStart = FALSE,   checkOverlappingEntries = FALSE,   checkMissingValues = FALSE,   checkInObservation = FALSE,   checkAttributes = FALSE,   checkPermanentTable = FALSE,   dropExtraColumns = FALSE,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a cohort table input. — validateCohortArgument","text":"cohort Object validated valid cohort input. checkEndAfterStart TRUE check cohort end dates come cohort start date performed. checkOverlappingEntries TRUE check individuals overlapping cohort entries performed. checkMissingValues TRUE check missing values required fields performed. checkInObservation TRUE check cohort entries within individuals observation periods performed. checkAttributes Whether check attributes present populated correctly. checkPermanentTable Whether check table permanent table. dropExtraColumns Whether drop extra columns required ones. validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a cohort table input. — validateCohortArgument","text":"","code":"cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )    ),    cohortTables = list(     cohort = dplyr::tibble(       cohort_definition_id = 1L,       subject_id = 1L,       cohort_start_date = as.Date(\"2020-01-01\"),       cohort_end_date = as.Date(\"2021-02-10\")     )   ),   cdmName = \"mock\" )  validateCohortArgument(cdm$cohort) #> # A tibble: 1 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          1 2020-01-01        2021-02-10"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortIdArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate cohortId argument. CohortId can either be a cohort_definition_id value, a cohort_name or a tidyselect expression referinc to cohort_names. If you want to support tidyselect expressions please use the function as: validateCohortIdArgument({{cohortId}}, cohort). — validateCohortIdArgument","title":"Validate cohortId argument. CohortId can either be a cohort_definition_id value, a cohort_name or a tidyselect expression referinc to cohort_names. If you want to support tidyselect expressions please use the function as: validateCohortIdArgument({{cohortId}}, cohort). — validateCohortIdArgument","text":"Validate cohortId argument. CohortId can either cohort_definition_id value, cohort_name tidyselect expression referinc cohort_names. want support tidyselect expressions please use function : validateCohortIdArgument({{cohortId}}, cohort).","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortIdArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate cohortId argument. CohortId can either be a cohort_definition_id value, a cohort_name or a tidyselect expression referinc to cohort_names. If you want to support tidyselect expressions please use the function as: validateCohortIdArgument({{cohortId}}, cohort). — validateCohortIdArgument","text":"","code":"validateCohortIdArgument(   cohortId,   cohort,   null = TRUE,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortIdArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate cohortId argument. CohortId can either be a cohort_definition_id value, a cohort_name or a tidyselect expression referinc to cohort_names. If you want to support tidyselect expressions please use the function as: validateCohortIdArgument({{cohortId}}, cohort). — validateCohortIdArgument","text":"cohortId cohortId vector validated. cohort cohort_table object. null Whether NULL accepted. NULL cohortId returned. validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateCohortIdArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate cohortId argument. CohortId can either be a cohort_definition_id value, a cohort_name or a tidyselect expression referinc to cohort_names. If you want to support tidyselect expressions please use the function as: validateCohortIdArgument({{cohortId}}, cohort). — validateCohortIdArgument","text":"","code":"cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )    ),    cohortTables = list(     cohort = dplyr::tibble(       cohort_definition_id = 1L,       subject_id = 1L,       cohort_start_date = as.Date(\"2020-01-01\"),       cohort_end_date = as.Date(\"2021-02-10\")     )   ),   cdmName = \"mock\" )  validateCohortIdArgument(NULL, cdm$cohort) #> [1] 1 validateCohortIdArgument(1L, cdm$cohort) #> [1] 1 validateCohortIdArgument(2L, cdm$cohort, validation = \"warning\") #> Warning: ! cohort definition id: 2 not defined in settings. #> Warning: ! cohortId is empty. #> integer(0)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate whether a variable points to a certain exiting column in a table. — validateColumn","title":"Validate whether a variable points to a certain exiting column in a table. — validateColumn","text":"Validate whether variable points certain exiting column table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate whether a variable points to a certain exiting column in a table. — validateColumn","text":"","code":"validateColumn(   column,   x,   type = c(\"character\", \"date\", \"logical\", \"numeric\", \"integer\"),   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate whether a variable points to a certain exiting column in a table. — validateColumn","text":"column Name column want check exist x table. x Table check column exist. type Type column. validation Whether throw warning error. call Passed cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate whether a variable points to a certain exiting column in a table. — validateColumn","text":"validated name","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate whether a variable points to a certain exiting column in a table. — validateColumn","text":"","code":"x <- dplyr::tibble(a = 1, b = \"xxx\")  validateColumn(\"a\", x, validation = \"warning\") #> [1] \"a\" validateColumn(\"a\", x, type = \"character\", validation = \"warning\") #> Warning: ! a type must be a choice of: `character`; but it is numeric. #> [1] \"a\" validateColumn(\"a\", x, type = \"numeric\", validation = \"warning\") #> [1] \"a\" validateColumn(\"not_existing\", x, type = \"numeric\", validation = \"warning\") #> Warning: ! not_existing column does not exist. #> [1] \"not_existing\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate conceptSet argument. It can either be a list, a codelist, a conceptSetExpression or a codelist with details. The output will always be a codelist. — validateConceptSetArgument","title":"Validate conceptSet argument. It can either be a list, a codelist, a conceptSetExpression or a codelist with details. The output will always be a codelist. — validateConceptSetArgument","text":"Validate conceptSet argument. can either list, codelist, conceptSetExpression codelist details. output always codelist.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate conceptSet argument. It can either be a list, a codelist, a conceptSetExpression or a codelist with details. The output will always be a codelist. — validateConceptSetArgument","text":"","code":"validateConceptSetArgument(   conceptSet,   cdm = NULL,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate conceptSet argument. It can either be a list, a codelist, a conceptSetExpression or a codelist with details. The output will always be a codelist. — validateConceptSetArgument","text":"conceptSet can either named list concepts codelist, codelist_with_details conceptSetExpression object. cdm cdm_reference object, needed conceptSetExpression provided. validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate conceptSet argument. It can either be a list, a codelist, a conceptSetExpression or a codelist with details. The output will always be a codelist. — validateConceptSetArgument","text":"codelist object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate conceptSet argument. It can either be a list, a codelist, a conceptSetExpression or a codelist with details. The output will always be a codelist. — validateConceptSetArgument","text":"","code":"conceptSet <- list(disease_x = c(1L, 2L)) validateConceptSetArgument(conceptSet) #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - disease_x (2 codes)"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate name argument. It must be a snake_case character vector. You can add the a cdm object to check name is not already used in that cdm. — validateNameArgument","title":"Validate name argument. It must be a snake_case character vector. You can add the a cdm object to check name is not already used in that cdm. — validateNameArgument","text":"Validate name argument. must snake_case character vector. can add cdm object check name already used cdm.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate name argument. It must be a snake_case character vector. You can add the a cdm object to check name is not already used in that cdm. — validateNameArgument","text":"","code":"validateNameArgument(   name,   cdm = NULL,   validation = \"error\",   null = FALSE,   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate name argument. It must be a snake_case character vector. You can add the a cdm object to check name is not already used in that cdm. — validateNameArgument","text":"name Name new table added cdm object. cdm cdm_reference object. check table named name already exists cdm. validation perform validation: \"error\", \"warning\". null TRUE, name can NULL call call argument pass cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate name argument. It must be a snake_case character vector. You can add the a cdm object to check name is not already used in that cdm. — validateNameArgument","text":"","code":"# this is a validate name name <- \"my_new_table\" validateNameArgument(name) #> [1] \"my_new_table\"  # this is not name <- \"myTableNAME\" validateNameArgument(name, validation = \"warning\") #> Warning: ! `name` was modified: myTableNAME -> my_table_name #> [1] \"my_table_name\""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if two columns are valid Name-Level pair. — validateNameLevel","title":"Validate if two columns are valid Name-Level pair. — validateNameLevel","text":"Validate two columns valid Name-Level pair.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if two columns are valid Name-Level pair. — validateNameLevel","text":"","code":"validateNameLevel(   x,   prefix,   sep = \" &&& \",   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if two columns are valid Name-Level pair. — validateNameLevel","text":"x tibble. prefix Prefix name-level pair, e.g. 'strata' strata_name-strata_level pair. sep Separation pattern. validation Either 'error', 'warning' 'message'. call used cli report errors.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameStyle.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate nameStyle argument. If any of the element in ... has length greater than 1 it must be contained in nameStyle. Note that snake case notation is used. — validateNameStyle","title":"Validate nameStyle argument. If any of the element in ... has length greater than 1 it must be contained in nameStyle. Note that snake case notation is used. — validateNameStyle","text":"Validate nameStyle argument. element ... length greater 1 must contained nameStyle. Note snake case notation used.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameStyle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate nameStyle argument. If any of the element in ... has length greater than 1 it must be contained in nameStyle. Note that snake case notation is used. — validateNameStyle","text":"","code":"validateNameStyle(nameStyle, ..., call = parent.frame())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameStyle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate nameStyle argument. If any of the element in ... has length greater than 1 it must be contained in nameStyle. Note that snake case notation is used. — validateNameStyle","text":"nameStyle character vector. must contain ... elements snake_case format {}. ... Elements included. call Passed cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameStyle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate nameStyle argument. If any of the element in ... has length greater than 1 it must be contained in nameStyle. Note that snake case notation is used. — validateNameStyle","text":"invisible nameStyle.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNameStyle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate nameStyle argument. If any of the element in ... has length greater than 1 it must be contained in nameStyle. Note that snake case notation is used. — validateNameStyle","text":"","code":"validateNameStyle(   nameStyle = \"hi_{cohort_name}\",   cohortName = c(\"cohort1\", \"cohort2\"),   otherVariable = c(\"only 1 value\") )  if (FALSE) { # \\dontrun{ validateNameStyle(   nameStyle = \"hi_{cohort_name}\",   cohortName = c(\"cohort1\", \"cohort2\"),   otherVariable = c(\"value1\", \"value2\") ) } # } validateNameStyle(   nameStyle = \"{other_variable}_hi_{cohort_name}\",   cohortName = c(\"cohort1\", \"cohort2\"),   otherVariable = c(\"value1\", \"value2\") )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNewColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a new column of a table — validateNewColumn","title":"Validate a new column of a table — validateNewColumn","text":"Validate new column table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNewColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a new column of a table — validateNewColumn","text":"","code":"validateNewColumn(table, column, validation = \"warning\", call = parent.frame())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNewColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a new column of a table — validateNewColumn","text":"table table check column already exists. column Character vector name(s) new column(s). validation Whether throw warning error. call Passed cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNewColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a new column of a table — validateNewColumn","text":"table without conflicting columns.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateNewColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a new column of a table — validateNewColumn","text":"","code":"x <- dplyr::tibble(   column1 = c(1L, 2L),   column2 = c(\"a\", \"b\") ) validateNewColumn(x, \"not_exiting_column\") #> # A tibble: 2 × 2 #>   column1 column2 #>     <int> <chr>   #> 1       1 a       #> 2       2 b       validateNewColumn(x, \"column1\") #> Warning: ! columns `column1` already exist in the table. They will be overwritten. #> # A tibble: 2 × 1 #>   column2 #>   <chr>   #> 1 a       #> 2 b"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an omop_table — validateOmopTable","title":"Validate an omop_table — validateOmopTable","text":"Validate omop_table","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an omop_table — validateOmopTable","text":"","code":"validateOmopTable(   omopTable,   version = NULL,   cast = FALSE,   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an omop_table — validateOmopTable","text":"omopTable omop_table check. version version cdm. cast Whether cast columns correct type. call Call argument passed cli error message.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an omop_table — validateOmopTable","text":"omop_table object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateResultArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if a an object is a valid 'summarised_result' object. — validateResultArgument","title":"Validate if a an object is a valid 'summarised_result' object. — validateResultArgument","text":"Validate object valid 'summarised_result' object.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateResultArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if a an object is a valid 'summarised_result' object. — validateResultArgument","text":"","code":"validateResultArgument(   result,   checkNoDuplicates = FALSE,   checkNameLevel = FALSE,   checkSuppression = FALSE,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateResultArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if a an object is a valid 'summarised_result' object. — validateResultArgument","text":"result summarised_result object validate. checkNoDuplicates Whether allowed duplicates result object. checkNameLevel Whether name-level paired columns can correctly split. checkSuppression Whether suppression result object well defined. validation error supported moment. call parent.frame","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateResultArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if a an object is a valid 'summarised_result' object. — validateResultArgument","text":"summarise result object","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateResultArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if a an object is a valid 'summarised_result' object. — validateResultArgument","text":"","code":"x <- dplyr::tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = \"my_cohort\",   \"strata_name\" = c(\"sex\", \"sex &&& age_group\", \"sex &&& year\"),   \"strata_level\" = c(\"Female\", \"Male &&& <40\", \"Female &&& 2010\"),   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> `result_type`, `package_name`, and `package_version` added to settings.  validateResultArgument(x) #> # A tibble: 3 × 13 #>   result_id cdm_name group_name  group_level strata_name       strata_level    #>       <int> <chr>    <chr>       <chr>       <chr>             <chr>           #> 1         1 eunomia  cohort_name my_cohort   sex               Female          #> 2         1 eunomia  cohort_name my_cohort   sex &&& age_group Male &&& <40    #> 3         1 eunomia  cohort_name my_cohort   sex &&& year      Female &&& 2010 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateStrataArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"To validate a strata list. It makes sure that elements are unique and point to columns in table. — validateStrataArgument","title":"To validate a strata list. It makes sure that elements are unique and point to columns in table. — validateStrataArgument","text":"validate strata list. makes sure elements unique point columns table.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateStrataArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To validate a strata list. It makes sure that elements are unique and point to columns in table. — validateStrataArgument","text":"","code":"validateStrataArgument(strata, table, call = parent.frame())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateStrataArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To validate a strata list. It makes sure that elements are unique and point to columns in table. — validateStrataArgument","text":"strata list characters point columns table. table table columns. call Passed cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateStrataArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To validate a strata list. It makes sure that elements are unique and point to columns in table. — validateStrataArgument","text":"strata input error input incorrect.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateStrataArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To validate a strata list. It makes sure that elements are unique and point to columns in table. — validateStrataArgument","text":"","code":"strata <- list(\"age\", \"sex\", c(\"age\", \"sex\")) x <- dplyr::tibble(age = 30L, sex = \"Female\")  validateStrataArgument(strata, x) #> [[1]] #> [1] \"age\" #>  #> [[2]] #> [1] \"sex\" #>  #> [[3]] #> [1] \"age\" \"sex\" #>"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateWindowArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a window argument. It must be a list of two elements (window start and window end), both must be integerish and window start must be lower or equal than window end. — validateWindowArgument","title":"Validate a window argument. It must be a list of two elements (window start and window end), both must be integerish and window start must be lower or equal than window end. — validateWindowArgument","text":"Validate window argument. must list two elements (window start window end), must integerish window start must lower equal window end.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateWindowArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a window argument. It must be a list of two elements (window start and window end), both must be integerish and window start must be lower or equal than window end. — validateWindowArgument","text":"","code":"validateWindowArgument(window, snakeCase = TRUE, call = parent.frame())"},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateWindowArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a window argument. It must be a list of two elements (window start and window end), both must be integerish and window start must be lower or equal than window end. — validateWindowArgument","text":"window time window snakeCase return default window  name snake case TRUE call call argument pass cli functions.","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateWindowArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a window argument. It must be a list of two elements (window start and window end), both must be integerish and window start must be lower or equal than window end. — validateWindowArgument","text":"time window","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/reference/validateWindowArgument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a window argument. It must be a list of two elements (window start and window end), both must be integerish and window start must be lower or equal than window end. — validateWindowArgument","text":"","code":"validateWindowArgument(list(c(0, 15), c(-Inf, Inf))) #> $`0_to_15` #> [1]  0 15 #>  #> $minf_to_inf #> [1] -Inf  Inf #>  validateWindowArgument(list(c(0, 15), c(-Inf, Inf)), snakeCase = FALSE) #> $`0 to 15` #> [1]  0 15 #>  #> $`-inf to inf` #> [1] -Inf  Inf #>"},{"path":"https://darwin-eu.github.io/omopgenerics/news/index.html","id":"omopgenerics-120","dir":"Changelog","previous_headings":"","what":"omopgenerics 1.2.0","title":"omopgenerics 1.2.0","text":"CRAN release: 2025-05-19 Remove NA estimates transformToSummarisedResult @catalamarti #702 Create logging functions @catalamarti #700 Allow strata character @catalamarti #703 Remove settings NA filterSettings @catalamarti #704 validateWindowArgument force snake_case names @catalamarti #711 Keep cohort_table class collect @catalamarti #710 dplyr::as_tibble codelist @catalamarti #712 type -> codelist_type @catalamarti #709","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/news/index.html","id":"omopgenerics-111","dir":"Changelog","previous_headings":"","what":"omopgenerics 1.1.1","title":"omopgenerics 1.1.1","text":"CRAN release: 2025-03-16 general validation cohorts @edward-burn #692 change grepl stringr::str_detect @catalamarti #689 allow readr::guess_encoding fail default configuration @catalamarti #685 keep codelist class subsetting @catalamarti #693 export summarised_results always utf8 @catalamarti #690 add option checkPermanentTable validateCohortArgument @catalamarti #694","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/news/index.html","id":"omopgenerics-110","dir":"Changelog","previous_headings":"","what":"omopgenerics 1.1.0","title":"omopgenerics 1.1.0","text":"CRAN release: 2025-02-25 general cdm validation checks @edward-burn #674 typo validateConceptSet @catalamarti #673 fix call argument @catalamarti #677 fix tempdir(“…”) @catalamarti #679 new function transformToSummarisedResult @catalamarti #676","code":""},{"path":"https://darwin-eu.github.io/omopgenerics/news/index.html","id":"omopgenerics-100","dir":"Changelog","previous_headings":"","what":"omopgenerics 1.0.0","title":"omopgenerics 1.0.0","text":"CRAN release: 2025-02-14 Stable release package. Added NEWS.md file track changes package.","code":""}]
